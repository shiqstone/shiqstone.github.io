<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在Linux下如何防止定时脚本重复执行</title>
      <link href="/2020/03/13/linux-crontab-avoid-repeat-run/"/>
      <url>/2020/03/13/linux-crontab-avoid-repeat-run/</url>
      
        <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>好多系统中会用到邮件系统，我们假设有一个 PHP 脚本用来发送邮件。使用 Linux cron 每分钟执行一次<br>我们暂时不引入队列系统，其实使用队列处理此方式更优。</p><p>我们得到下面的基本配置</p><pre><code class="bash">* * * * * php /home/app/email.php</code></pre><h2 id="问题分析和解决"><a href="#问题分析和解决" class="headerlink" title="问题分析和解决"></a>问题分析和解决</h2><h4 id="异常问题"><a href="#异常问题" class="headerlink" title="异常问题"></a>异常问题</h4><p>如果这个邮件服务出现异常，进程僵死怎么办？<br>假设由于未知因素， email.php 脚本一直执行，没有退出。极端的情况，进入一个 while 死循环。<br>这下倒好，原来说好的一分钟执行一次，现在一直死这边了，后面的脚本也不能跑了</p><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p>使用 timeout，假设我们设定每个脚本最多执行时间位 200秒，超过 200秒 就自动死掉。</p><pre><code class="bash">* * * * * timeout 200 php /home/app/email.php</code></pre><h4 id="重复问题"><a href="#重复问题" class="headerlink" title="重复问题"></a>重复问题</h4><p>如果这个脚本执行时间超过 60秒，下一分钟又会执行 php email.php，如果避免重复执行？<br>这样会出现，有两个进程同时在执行 php email.php，那会不会出现同一个任务被执行了两次？</p><h4 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h4><p>使用 flock 进行互斥控制</p><pre><code>用法： flock [选项] &lt;文件|目录&gt; &lt;命令&gt; [&lt;参数&gt;...] flock [选项] &lt;文件|目录&gt; -c &lt;命令&gt; flock [选项] &lt;文件描述符号码&gt;</code></pre><p>通过 shell 脚本管理文件锁。</p><pre><code>选项： -s, --shared             获取共享锁 -x, --exclusive          获取排他锁(默认) -u, --unlock             移除锁 -n, --nonblock           失败而非等待 -w, --timeout &lt;秒&gt;       等待限定的时间 -E, --conflict-exit-code &lt;数字&gt;     冲突或超时后的退出代码 -o, --close              运行命令前关闭文件描述符 -c, --command &lt;命令&gt;      通过 shell 运行单个命令字符串 -F, --no-fork            执行命令时不 fork     --verbose            增加详尽程度 -h, --help               display this help -V, --version            display version</code></pre><p>使用其中的排他设置</p><pre><code class="bash">* * * * * flock -xn /tmp/test.lock -c &quot;timeout 200 php /home/app/email.php&quot;</code></pre><p>添加日志，便于后续排查问题</p><pre><code class="bash">* * * * * flock -xn /tmp/test.lock -c &quot;timeout 200 php /home/app/email.php &gt;&gt; /home/log/test.log 2&gt;&amp;1&quot;</code></pre><h2 id="频率提升"><a href="#频率提升" class="headerlink" title="频率提升"></a>频率提升</h2><p>linux crontab 最小粒度为分钟级，如果觉得一分钟一次频率太低，想 10s 执行一次怎么办？</p><pre><code class="bash">* * * * * php /home/app/email.php &gt;&gt; /home/log/test.log 2&gt;&amp;1* * * * * ( sleep 10 ; php /home/app/email.php &gt;&gt; /home/log/test.log 2&gt;&amp;1 )* * * * * ( sleep 20 ; php /home/app/email.php &gt;&gt; /home/log/test.log 2&gt;&amp;1 )* * * * * ( sleep 30 ; php /home/app/email.php &gt;&gt; /home/log/test.log 2&gt;&amp;1 )* * * * * ( sleep 40 ; php /home/app/email.php &gt;&gt; /home/log/test.log 2&gt;&amp;1 )* * * * * ( sleep 50 ; php /home/app/email.php &gt;&gt; /home/log/test.log 2&gt;&amp;1 )</code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>准备一个 php 脚本 test.php</p><pre><code class="php">&lt;?php$i = 10000;while ($i &gt; 0) {  echo --$i . \PHP_EOL;  sleep(1);}</code></pre><p>执行</p><pre><code class="bash">flock -xn /tmp/mytest.lock -c &quot;timeout 30 php /path/to/flock/test.php&quot;</code></pre><p>可以看到终端不停输出数值</p><pre><code class="bash">9999999899979996999599949993...</code></pre><p>这时，再打开另一个终端，执行相同命令，结果发现<br>第二次执行的没有输出（因为 flock 互斥）<br>第一个执行的，30秒后自动关闭进程（因为 timeout 30）</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 防火墙和端口</title>
      <link href="/2020/03/01/centos7-firewall/"/>
      <url>/2020/03/01/centos7-firewall/</url>
      
        <content type="html"><![CDATA[<h1 id="首先检查某端口是否开启："><a href="#首先检查某端口是否开启：" class="headerlink" title="首先检查某端口是否开启："></a>首先检查某端口是否开启：</h1><pre><code class="bash">firewall-cmd --query-port=80/tcp --zone=public  #查询80端口是否开启</code></pre><p>返回no即未开启，显示yes为已开启</p><h1 id="开启某端口"><a href="#开启某端口" class="headerlink" title="开启某端口"></a>开启某端口</h1><pre><code class="bash">firewall-cmd --zone=public --add-port=80/tcp --permanent #添加80端口</code></pre><p>修改完成后需要重启防火墙服务才能生效</p><h1 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h1><pre><code class="bash">systemctl status firewalld</code></pre><p>有如下提示表示未开启<br>FirewallD is not running</p><h1 id="开启防火墙，没有任何提示即开启成功"><a href="#开启防火墙，没有任何提示即开启成功" class="headerlink" title="开启防火墙，没有任何提示即开启成功"></a>开启防火墙，没有任何提示即开启成功</h1><pre><code class="bash">systemctl start firewalld</code></pre><h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><pre><code class="bash">systemctl stop firewalld</code></pre><h1 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h1><pre><code class="bash">systemctl restart firewalld</code></pre><h1 id="相关网站收藏"><a href="#相关网站收藏" class="headerlink" title="相关网站收藏"></a>相关网站收藏</h1><p><a href="http://ping.pe" target="_blank" rel="noopener">http://ping.pe</a><br><a href="http://ping.chinaz.com" target="_blank" rel="noopener">http://ping.chinaz.com</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次慢查询问题的排查</title>
      <link href="/2020/02/01/troubleshooting-a-slow-query/"/>
      <url>/2020/02/01/troubleshooting-a-slow-query/</url>
      
        <content type="html"><![CDATA[<h2 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h2><p>某个业务的查询页面打开非常慢，甚至卡死，通过排查日志，定位到是分页查询有慢查询sql，其中一条简单查询耗时长达40多秒<br>结合前后其他sql耗时都在毫秒级，排除网络问题，在命令行中执行sql也同样很慢</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>有问题的sql如下</p><pre><code class="sql">mysql&gt; select count(*) from test_tab where update_time&gt;=&#39;2020-01-10&#39; and update_time&lt;&#39;2020-01-11&#39; and label is not null;+----------+| count(*) |+----------+|   229330 |+----------+1 row in set (41.34 sec)</code></pre><p>首先看了一下全表数据，接近千万级，但是有趣的是耗时只有不到4s，对于千万级的表，勉强可以接收</p><pre><code class="sql">mysql&gt; select count(*) from test_tab;+----------+| count(*) |+----------+|  9469766 |+----------+1 row in set (3.86 sec)</code></pre><p>更有意思的是，执行相同条件查询数据记录的sql，结果10ms就返回了</p><pre><code class="sql">mysql&gt; select id, label, call_round, dial_start_time, dial_duration, disconnect_reason, update_time from test_tab where update_time&gt;=&#39;2020-01-10&#39; and update_time&lt;&#39;2020-01-11&#39; and label is not null order by update_time desc limit 0, 20;+----------+-------+------------+---------------------+---------------+-------------------+---------------------+| id       | label | call_round | dial_start_time     | dial_duration | disconnect_reason | update_time         |+----------+-------+------------+---------------------+---------------+-------------------+---------------------+| 17510408 | F     |          0 | NULL                |          NULL | NULL              | 2020-01-10 21:01:09 || 17510411 | F     |          0 | NULL                |          NULL | NULL              | 2020-01-10 21:01:08 || 17510421 | E     |          8 | 2020-01-10 20:59:43 |            78 | NULL              | 2020-01-10 21:00:58 || 17510418 | F     |          0 | NULL                |          NULL | NULL              | 2020-01-10 21:00:54 || 17510407 | C     |         15 | 2020-01-10 20:59:33 |            78 | NULL              | 2020-01-10 21:00:48 || 17510416 | A     |          8 | 2020-01-10 20:59:34 |            57 | NULL              | 2020-01-10 21:00:28 || 17510413 | C     |          2 | 2020-01-10 21:00:04 |            20 | NULL              | 2020-01-10 21:00:21 || 17510415 | F     |       NULL | NULL                |          NULL | NULL              | 2020-01-10 21:00:20 || 17510412 | F     |       NULL | NULL                |          NULL | NULL              | 2020-01-10 21:00:18 || 17510423 | C     |          4 | 2020-01-10 20:59:49 |            31 | NULL              | 2020-01-10 21:00:17 || 17510420 | C     |          1 | 2020-01-10 20:59:46 |             4 | NULL              | 2020-01-10 20:59:47 || 17510424 | F     |       NULL | NULL                |          NULL | 1                 | 2020-01-10 20:59:44 || 17510410 | F     |       NULL | NULL                |          NULL | 1                 | 2020-01-10 20:59:41 || 17510419 | F     |       NULL | NULL                |          NULL | 1                 | 2020-01-10 20:59:38 || 17510437 | F     |          0 | NULL                |          NULL | NULL              | 2020-01-10 20:59:37 || 17510441 | F     |          0 | NULL                |          NULL | NULL              | 2020-01-10 20:59:35 || 17510417 | F     |       NULL | NULL                |          NULL | 1                 | 2020-01-10 20:59:34 || 17510414 | F     |       NULL | NULL                |          NULL | 1                 | 2020-01-10 20:59:32 || 17510409 | F     |       NULL | NULL                |          NULL | 8                 | 2020-01-10 20:59:31 || 17510422 | F     |       NULL | NULL                |          NULL | 6                 | 2020-01-10 20:59:29 |+----------+-------+------------+---------------------+---------------+-------------------+---------------------+20 rows in set (0.01 sec)</code></pre><p>分别查看各条sql的执行计划，结果如下<br>sql_1:</p><pre><code class="sql">mysql&gt; explain select count(*) from test_tab;+----+-------------+---------------------------+-------+---------------+-------------------------------+---------+------+----------+-------------+| id | select_type | table                     | type  | possible_keys | key                           | key_len | ref  | rows     | Extra       |+----+-------------+---------------------------+-------+---------------+-------------------------------+---------+------+----------+-------------+|  1 | SIMPLE      | test_tab | index | NULL          | ai_dianxiao_update_time_index | 4       | NULL | 11823805 | Using index |+----+-------------+---------------------------+-------+---------------+-------------------------------+---------+------+----------+-------------+</code></pre><p>sql_2:</p><pre><code class="sql">mysql&gt; explain select count(*) from test_tab where update_time&gt;=&#39;2020-01-10&#39; and update_time&lt;&#39;2020-01-11&#39; and label is not null;+----+-------------+---------------------------+-------+-------------------------------+-------------------------------+---------+------+--------+------------------------------------+| id | select_type | table                     | type  | possible_keys                 | key                           | key_len | ref  | rows   | Extra                              |+----+-------------+---------------------------+-------+-------------------------------+-------------------------------+---------+------+--------+------------------------------------+|  1 | SIMPLE      | test_tab | range | ai_dianxiao_update_time_index | ai_dianxiao_update_time_index | 4       | NULL | 515618 | Using index condition; Using where |+----+-------------+---------------------------+-------+-------------------------------+-------------------------------+---------+------+--------+------------------------------------+</code></pre><p>sql_3:</p><pre><code class="sql">mysql&gt; explain select id, label, call_round, dial_start_time, dial_duration, disconnect_reason, update_time from test_tab where update_time&gt;=&#39;2020-01-10&#39; and update_time&lt;&#39;2020-01-11&#39; and label is not null order by update_time desc limit 0, 20;+----+-------------+---------------------------+-------+-------------------------------+-------------------------------+---------+------+--------+------------------------------------+| id | select_type | table                     | type  | possible_keys                 | key                           | key_len | ref  | rows   | Extra                              |+----+-------------+---------------------------+-------+-------------------------------+-------------------------------+---------+------+--------+------------------------------------+|  1 | SIMPLE      | test_tab | range | ai_dianxiao_update_time_index | ai_dianxiao_update_time_index | 4       | NULL | 515618 | Using index condition; Using where |+----+-------------+---------------------------+-------+-------------------------------+-------------------------------+---------+------+--------+------------------------------------+</code></pre><p>初步分析三个sql都用到了索引，sql_1虽然是查询全表数据，但是直接命中二级索引，所以查询速度也很快[4]<br>通过比较执行计划可以看到，sql_2和sql_3完全一致但是执行速度相差巨大，推测sql_3是因为筛选结果集靠前的结果，且只取结果集20条，所以很快返回结果</p><p>sql_4:</p><pre><code class="sql">mysql&gt; select id, label, call_round, dial_start_time, dial_duration, disconnect_reason, update_time from test_tab where update_time&gt;=&#39;2020-01-10&#39; and update_time&lt;&#39;2020-01-11&#39; and label is not null order by update_time desc limit 50000, 20;+----------+-------+------------+---------------------+---------------+-----------------------+---------------------+| id       | label | call_round | dial_start_time     | dial_duration | disconnect_reason     | update_time         |+----------+-------+------------+---------------------+---------------+-----------------------+---------------------+| 17415457 | F     |       NULL | NULL                |          NULL | 1                     | 2020-01-10 14:06:24 || 17415445 | F     |       NULL | NULL                |          NULL | 1                     | 2020-01-10 14:06:24 || 17456511 | F     |       NULL | NULL                |          NULL | -ERR NO_USER_RESPONSE | 2020-01-10 14:06:23 || 17456500 | F     |       NULL | NULL                |          NULL | 1                     | 2020-01-10 14:06:23 || 17456491 | F     |       NULL | NULL                |          NULL | 1                     | 2020-01-10 14:06:23 || 17456428 | G     |          0 | 2020-01-10 14:06:14 |            10 | NULL                  | 2020-01-10 14:06:23 || 17433875 | F     |       NULL | NULL                |          NULL | NULL                  | 2020-01-10 14:06:23 || 17433874 | F     |       NULL | NULL                |          NULL | NULL                  | 2020-01-10 14:06:23 || 17415635 | F     |       NULL | 2020-01-10 14:02:37 |          NULL | 2                     | 2020-01-10 14:06:23 || 17456501 | F     |       NULL | NULL                |          NULL | 5                     | 2020-01-10 14:06:22 || 17456483 | F     |       NULL | NULL                |          NULL | 1                     | 2020-01-10 14:06:22 || 17456460 | G     |          0 | 2020-01-10 14:06:17 |             7 | NULL                  | 2020-01-10 14:06:22 || 17456444 | G     |          0 | 2020-01-10 14:06:15 |             9 | NULL                  | 2020-01-10 14:06:22 || 17456496 | F     |       NULL | NULL                |          NULL | 6                     | 2020-01-10 14:06:21 || 17456495 | F     |       NULL | NULL                |          NULL | 1                     | 2020-01-10 14:06:21 || 17456464 | G     |          0 | 2020-01-10 14:06:15 |             7 | NULL                  | 2020-01-10 14:06:21 || 17415461 | F     |       NULL | NULL                |          NULL | 4                     | 2020-01-10 14:06:21 || 17456477 | F     |       NULL | NULL                |          NULL | 1                     | 2020-01-10 14:06:20 || 17456474 | F     |       NULL | NULL                |          NULL | 1                     | 2020-01-10 14:06:20 || 17456462 | G     |          0 | 2020-01-10 14:06:08 |            14 | NULL                  | 2020-01-10 14:06:20 |+----------+-------+------------+---------------------+---------------+-----------------------+---------------------+20 rows in set (13.77 sec)</code></pre><p>尝试执行sql_4，验证了这个推测，当筛选结果比较靠后时，游标定位比较耗时，结果返回就比较慢了，这种情况下，需要用其他一些方式来优化[5]，在此不展开</p><p>再回到sql_2，通过各种尝试比较暂时排除索引问题，注意到这个业务的时间字段使用的是timestamp，猜测字段的数据类型会有影响<br>为了不影响线上服务，先找了一个其他数据库，单表1200w数据，时间字段使用的是datetime，执行类似条件查询，居然不到一秒就返回结果，<br>为了验证结果，在非服务时间，将线上表复制到测试数据库，修改字段类型为datetime，执行sql_2同样是秒级响应，满足要求</p><p>根据检索网上资料[3]，对于InnoDB引擎，建立索引的情况下，datetime明显优于timestamp</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>建议业务方修改数据表字段为datetime，可以根本解决问题<br>但是业务方考虑之前是希望使用”ON UPDATE CURRENT_TIMESTAMP”特性而采用的timestamp，需要修改代码较多，暂时不愿调整，于是在这个案例中只能迁移历史数据，减少当前热表总记录的方式。</p><p>另外，在分析过程中，还尝试修改查询条件，查询排序较靠前的记录，类似分页查询问题，速度有一定提升，分析是在索引进行扫描时，会预先根据条件按排序进行筛选，这样排序靠前的结果能更快的返回，查询速度自然要优于结果靠后的查询</p><pre><code class="sql">mysql&gt; select count(*) from test_tab where update_time&gt;=&#39;2019-12-01&#39; and update_time&lt;&#39;2019-12-02&#39; and label is not null;+----------+| count(*) |+----------+|    47302 |+----------+1 row in set (7.13 sec)</code></pre><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>对于这次案例，也许这并不是唯一的解决方案，也不是最好的处理方式，但是在项目使用中，对比datetime和timestamp两个类型，个人还是比较倾向与使用前者，毕竟日常数据库引擎都是InnoDB<br>也许使用timestamp唯一的优势只是使用”ON UPDATE CURRENT_TIMESTAMP”特性而少写一行更新时间代码而已，而且2038年也不远了<br>另外，在排查过程中，也有人提出分区表的方案，一方面，对应分区表了解不够全面，对于mysql执行过程不可控，再则分区表的分区键设计不够灵活，最终没有采用</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1]<a href="https://juejin.im/post/5bcc2935f265da0ac66987c9" target="_blank" rel="noopener">https://juejin.im/post/5bcc2935f265da0ac66987c9</a><br>[2]<a href="https://www.cnblogs.com/kerrycode/p/9909093.html" target="_blank" rel="noopener">https://www.cnblogs.com/kerrycode/p/9909093.html</a><br>[3]<a href="https://blog.csdn.net/adsadadaddadasda/article/details/78933784" target="_blank" rel="noopener">https://blog.csdn.net/adsadadaddadasda/article/details/78933784</a><br>[4]<a href="https://blog.csdn.net/wgw335363240/article/details/6295906" target="_blank" rel="noopener">https://blog.csdn.net/wgw335363240/article/details/6295906</a><br>[5]<a href="https://segmentfault.com/a/1190000008859706" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008859706</a><br>[6]<a href="http://hedengcheng.com/?p=577" target="_blank" rel="noopener">http://hedengcheng.com/?p=577</a><br>[7]<a href="https://www.w3cschool.cn/architectroad/architectroad-mysql-partition-table.html" target="_blank" rel="noopener">https://www.w3cschool.cn/architectroad/architectroad-mysql-partition-table.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>尝试使用Go截取视频生成缩略图</title>
      <link href="/2020/01/31/try-golang-snapshot-video-thumb/"/>
      <url>/2020/01/31/try-golang-snapshot-video-thumb/</url>
      
        <content type="html"><![CDATA[<h3 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1 基本命令"></a>1 基本命令</h3><p>使用ffmpeg截取视频生成图片，原始命令为</p><pre><code class="bash">ffmpeg -i src.mp4 -y -f mjpeg -ss 3 -t 1 -s 80x44 dist.jpg</code></pre><h3 id="2-简单封装"><a href="#2-简单封装" class="headerlink" title="2 简单封装"></a>2 简单封装</h3><pre><code class="go">package mainimport (  &quot;bytes&quot;         &quot;fmt&quot;  &quot;os/exec&quot;     )func main() {       filename := &quot;test.mp4&quot;  width := 288    height := 512   output := &quot;output.jpg&quot;     cmd := exec.Command(&quot;ffmpeg&quot;, &quot;-i&quot;, filename, &quot;-vframes&quot;, &quot;1&quot;, &quot;-s&quot;, fmt.Sprintf(&quot;%dx%d&quot;, width, height), &quot;-f&quot;, &quot;singlejpeg&quot;, output)  var buffer bytes.Buffer  cmd.Stdout = &amp;buffer   if cmd.Run() != nil {      panic(&quot;could not generate frame&quot;)  }}</code></pre><h3 id="3-查询数据库"><a href="#3-查询数据库" class="headerlink" title="3 查询数据库"></a>3 查询数据库</h3><p>增加从mysql数据库读取视频路径</p><pre><code class="go">package mainimport (    &quot;bytes&quot;    &quot;fmt&quot;    &quot;path&quot;    &quot;path/filepath&quot;    &quot;strings&quot;    &quot;os/exec&quot;    &quot;database/sql&quot;    _ &quot;github.com/go-sql-driver/mysql&quot;)func main() {    //user:password@tcp(localhost:5555)/dbname?charset=utf8    db, err := sql.Open(&quot;mysql&quot;, &quot;root@tcp(localhost:3306)/dsp?charset=utf8&quot;)    checkErr(err)    //查询数据    rows, err := db.Query(&quot;SELECT video_s3_url FROM material_video&quot;)    checkErr(err)    for rows.Next() {        var video_s3_url string        err = rows.Scan(&amp;video_s3_url)        checkErr(err)        fullpath := video_s3_url        //width := 288        //height := 512        fileName := filepath.Base(fullpath)        fileSuffix := path.Ext(fileName)        output := strings.TrimSuffix(fileName, fileSuffix) + &quot;.png&quot;         //fmt.Println(output)        cmd := exec.Command(&quot;ffmpeg&quot;, &quot;-i&quot;, fullpath, &quot;-vframes&quot;, &quot;1&quot;, &quot;-ss&quot;, &quot;3&quot;, &quot;-t&quot;, &quot;1&quot;, output)        var buffer bytes.Buffer        cmd.Stdout = &amp;buffer        if cmd.Run() != nil {            panic(&quot;could not generate frame&quot;)        }        //break;    }}func checkErr(err error) {    if err != nil {        panic(err)    }}</code></pre><h3 id="4-更新数据库"><a href="#4-更新数据库" class="headerlink" title="4 更新数据库"></a>4 更新数据库</h3><p>将生成图片路径更新到数据库</p><pre><code class="go">package mainimport (    &quot;bytes&quot;    &quot;fmt&quot;    &quot;path&quot;    &quot;path/filepath&quot;    &quot;strings&quot;    &quot;os/exec&quot;    &quot;database/sql&quot;    _ &quot;github.com/go-sql-driver/mysql&quot;)func main() {    //user:password@tcp(localhost:5555)/dbname?charset=utf8    db, err := sql.Open(&quot;mysql&quot;, &quot;root@tcp(localhost:3306)/dsp?charset=utf8&quot;)    checkErr(err)    //查询数据    rows, err := db.Query(&quot;SELECT id, video_s3_url FROM material_video&quot;)    checkErr(err)    cnt := 0    for rows.Next() {        var id int        var video_s3_url string        err = rows.Scan(&amp;id, &amp;video_s3_url)        checkErr(err)        fullpath := video_s3_url        fileName := filepath.Base(fullpath)        fileSuffix := path.Ext(fileName)        output := strings.TrimSuffix(fileName, fileSuffix) + &quot;.png&quot;         cmd := exec.Command(&quot;ffmpeg&quot;, &quot;-i&quot;, fullpath, &quot;-vframes&quot;, &quot;1&quot;, &quot;-ss&quot;, &quot;3&quot;, &quot;-t&quot;, &quot;1&quot;, output)        var buffer bytes.Buffer        cmd.Stdout = &amp;buffer        if cmd.Run() != nil {            panic(&quot;could not generate frame&quot;)        }        //更新数据        stmt, err := db.Prepare(&quot;update material_video set video_thumb_url=? where id=?&quot;)        checkErr(err)        res, err := stmt.Exec(output, id)        checkErr(err)        affect, err := res.RowsAffected()        checkErr(err)        if(affect&gt;0) {            cnt++        }    }    fmt.Println(cnt)}func checkErr(err error) {    if err != nil {        panic(err)    }}</code></pre><h3 id="5-文件上传共享"><a href="#5-文件上传共享" class="headerlink" title="5 文件上传共享"></a>5 文件上传共享</h3><p>考虑本地存储文件的局限性，改为将生成文件上传到S3服务器上，便于后续共享访问</p><pre><code class="go">package mainimport (    &quot;bytes&quot;    &quot;fmt&quot;    &quot;path&quot;    &quot;path/filepath&quot;    &quot;strings&quot;    &quot;os&quot;    &quot;os/exec&quot;    &quot;database/sql&quot;    _ &quot;github.com/go-sql-driver/mysql&quot;    &quot;net/http&quot;    &quot;github.com/aws/aws-sdk-go/aws&quot;    &quot;github.com/aws/aws-sdk-go/aws/credentials&quot;    &quot;github.com/aws/aws-sdk-go/aws/session&quot;    &quot;github.com/aws/aws-sdk-go/service/s3&quot;)func main() {    //user:password@tcp(localhost:5555)/dbname?charset=utf8    db, err := sql.Open(&quot;mysql&quot;, &quot;root@tcp(localhost:3306)/dsp?charset=utf8&quot;)    checkErr(err)    //query date    rows, err := db.Query(&quot;SELECT id, video_s3_url FROM material_video where video_thumb_url is null&quot;)    checkErr(err)    access_key := &quot;access_key_str&quot;    secret_key := &quot;secret_key_str&quot;    end_point := &quot;http://test.s3.amazon.cn&quot;    bucket := &quot;bucket_str&quot;     // Configure to use S3 Server    s, err := session.NewSession(&amp;aws.Config{        Region: aws.String(&quot;us-west-2&quot;),        Credentials: credentials.NewStaticCredentials( access_key, secret_key, &quot;&quot;),  // token can be left blank for now        Endpoint:         aws.String(end_point),        DisableSSL:       aws.Bool(true),        S3ForcePathStyle: aws.Bool(true),    })    if err != nil {        checkErr(err)    }    cnt := 0    for rows.Next() {        var id int        var video_s3_url string        err = rows.Scan(&amp;id, &amp;video_s3_url)        checkErr(err)        fullpath := video_s3_url        fileName := filepath.Base(fullpath)        fileSuffix := path.Ext(fileName)        fileSingleName := strings.TrimSuffix(fileName, fileSuffix)        output := fileSingleName + &quot;.png&quot;         fmt.Println(output)        //delete exist file        err = os.Remove(output);        if err != nil {            fmt.Println(err);        }        fmt.Println(&quot;ffmpeg&quot;, &quot;-i&quot;, fullpath, &quot;-vframes&quot;, &quot;1&quot;, &quot;-ss&quot;, &quot;3&quot;, &quot;-t&quot;, &quot;1&quot;, output)        cmd := exec.Command(&quot;ffmpeg&quot;, &quot;-i&quot;, fullpath, &quot;-vframes&quot;, &quot;1&quot;, &quot;-ss&quot;, &quot;3&quot;, &quot;-t&quot;, &quot;1&quot;, output)        var buffer bytes.Buffer        cmd.Stdout = &amp;buffer        if cmd.Run() != nil {            panic(&quot;could not generate frame&quot;)        }        // Upload        err = AddFileToS3(s, bucket, output)        if err != nil {            checkErr(err)        }        thumb_url := end_point + &quot;/&quot; + bucket + &quot;/&quot; + output        //update db        stmt, err := db.Prepare(&quot;update material_video set video_thumb_url=? where id=?&quot;)        checkErr(err)        res, err := stmt.Exec(thumb_url, id)        checkErr(err)        affect, err := res.RowsAffected()        checkErr(err)        if(affect&gt;0) {            cnt++        }        if(cnt&gt;10) {            break;        }    }    fmt.Println(cnt)}func checkErr(err error) {    if err != nil {        panic(err)    }}func AddFileToS3(s *session.Session, bucket string, fileDir string) error {    // Open the file for use    file, err := os.Open(fileDir)    if err != nil {        return err    }    defer file.Close()    // Get file size and read the file content into a buffer    fileInfo, _ := file.Stat()    var size int64 = fileInfo.Size()    buffer := make([]byte, size)    file.Read(buffer)    // Config settings: this is where you choose the bucket, filename, content-type etc.    // of the file you&#39;re uploading.    _, err = s3.New(s).PutObject(&amp;s3.PutObjectInput{        Bucket:               aws.String(bucket),        Key:                  aws.String(fileDir),        //ACL:                  aws.String(&quot;private&quot;),        Body:                 bytes.NewReader(buffer),        ContentLength:        aws.Int64(size),        ContentType:          aws.String(http.DetectContentType(buffer)),        ContentDisposition:   aws.String(&quot;attachment&quot;),        ServerSideEncryption: aws.String(&quot;AES256&quot;),    })    return err}</code></pre><h3 id="6-敏感信息配置"><a href="#6-敏感信息配置" class="headerlink" title="6 敏感信息配置"></a>6 敏感信息配置</h3><p>基本功能实现了，但是直接把数据库账号密码等配置的信息写在代码里的方式不够好，改为把数据库和S3配置使用配置文件方式<br>conf/conf.yaml</p><pre><code class="yaml">db:    dialect : mysql    user : root    password :    host : localhost    port : 3306    database : dsp    charset : utf8s3:    access_key : access_key_str    secret_key : secret_key_str    end_point : http://test.s3.amazon.cn    bucket : bucket_str</code></pre><p>snapshot.go</p><pre><code class="go">package mainimport (    &quot;io/ioutil&quot;    yaml &quot;gopkg.in/yaml.v2&quot;    &quot;bytes&quot;    //&quot;fmt&quot;    &quot;log&quot;    &quot;path&quot;    &quot;path/filepath&quot;    &quot;strings&quot;    &quot;os&quot;    &quot;os/exec&quot;    &quot;database/sql&quot;    _ &quot;github.com/go-sql-driver/mysql&quot;    &quot;time&quot;    &quot;net/http&quot;    &quot;github.com/aws/aws-sdk-go/aws&quot;    &quot;github.com/aws/aws-sdk-go/aws/credentials&quot;    &quot;github.com/aws/aws-sdk-go/aws/session&quot;    &quot;github.com/aws/aws-sdk-go/service/s3&quot;)var db *sql.DBvar s *session.Sessionfunc main() {    var (        Config Config    )    data, err := ioutil.ReadFile(&quot;conf/conf.yaml&quot;)    if err != nil {        checkErr(err)    }    err = yaml.Unmarshal(data, &amp;Config)    if err != nil {        checkErr(err)    }    //user:password@tcp(localhost:5555)/dbname?charset=utf8    db, err = sql.Open(Config.Db.Dialect, Config.Db.User + &quot;@tcp(&quot; + Config.Db.Host + &quot;:&quot; + Config.Db.Port + &quot;)/&quot; + Config.Db.Database + &quot;?charset=&quot; + Config.Db.Charset)    checkErr(err)    //query date    rows, err := db.Query(&quot;SELECT id, video_s3_url FROM material_video where video_thumb_url is null&quot;)    checkErr(err)    access_key := Config.S3.AccessKey    secret_key := Config.S3.SecretKey    end_point := Config.S3.EndPoint    bucket := Config.S3.Bucket    // Configure to use S3 Server    s, err = session.NewSession(&amp;aws.Config{        Region: aws.String(&quot;us-west-2&quot;),        Credentials: credentials.NewStaticCredentials( access_key, secret_key, &quot;&quot;),  // token can be left blank for now        Endpoint:         aws.String(end_point),        DisableSSL:       aws.Bool(true),        S3ForcePathStyle: aws.Bool(true),    })    if err != nil {        checkErr(err)    }    cnt := 0    for rows.Next() {        var id int        var video_s3_url string        err = rows.Scan(&amp;id, &amp;video_s3_url)        checkErr(err)         process(id, video_s3_url, bucket, end_point)        if(cnt&gt;10) {            break        }        cnt++    }    log.Println(cnt)}func process(id int, video_s3_url string, bucket string, end_point string) int64 {    fullpath := video_s3_url    fileName := filepath.Base(fullpath)    fileSuffix := path.Ext(fileName)    fileSingleName := strings.TrimSuffix(fileName, fileSuffix)    output := fileSingleName + &quot;.png&quot;     log.Println(output)    //delete exist file    _ = os.Remove(output);    log.Println(&quot;ffmpeg&quot;, &quot;-i&quot;, fullpath, &quot;-vframes&quot;, &quot;1&quot;, &quot;-ss&quot;, &quot;3&quot;, &quot;-t&quot;, &quot;1&quot;, output)    cmd := exec.Command(&quot;ffmpeg&quot;, &quot;-i&quot;, fullpath, &quot;-vframes&quot;, &quot;1&quot;, &quot;-ss&quot;, &quot;3&quot;, &quot;-t&quot;, &quot;1&quot;, output)    var buffer bytes.Buffer    cmd.Stdout = &amp;buffer    if cmd.Run() != nil {        //panic(&quot;could not generate frame&quot;)        log.Println(&quot;could not generate frame&quot;)    }    // Upload    err := AddFileToS3(bucket, output)    if err != nil {        log.Println(&quot;could not update to s3&quot;)        checkErr(err)    }    log.Println(output, &quot;update to s3&quot;)    thumb_url := end_point + &quot;/&quot; + bucket + &quot;/&quot; + output    //update db    timeStr := time.Now().Format(&quot;2006-01-02 15:04:05&quot;)    log.Println(&quot;update material_video set video_thumb_url=&#39;&quot;, thumb_url, &quot;&#39;, update_time=&#39;&quot;, timeStr, &quot;&#39; where id=&quot;, id)    stmt, err := db.Prepare(&quot;update material_video set video_thumb_url=?, update_time=? where id=?&quot;)    defer stmt.Close()    checkErr(err)    res, err := stmt.Exec(thumb_url, timeStr, id)    log.Println(&quot;res&quot;, res)    checkErr(err)    affect, err := res.RowsAffected()    checkErr(err)    return affect}func checkErr(err error) {    log.Println(err)    if err != nil {        panic(err)    }}func AddFileToS3(bucket string, fileDir string) error {    // Open the file for use    file, err := os.Open(fileDir)    if err != nil {        return err    }    defer file.Close()    // Get file size and read the file content into a buffer    fileInfo, _ := file.Stat()    var size int64 = fileInfo.Size()    buffer := make([]byte, size)    file.Read(buffer)    // Config settings: this is where you choose the bucket, filename, content-type etc.    // of the file you&#39;re uploading.    _, err = s3.New(s).PutObject(&amp;s3.PutObjectInput{        Bucket:               aws.String(bucket),        Key:                  aws.String(fileDir),        //ACL:                  aws.String(&quot;private&quot;),        Body:                 bytes.NewReader(buffer),        ContentLength:        aws.Int64(size),        ContentType:          aws.String(http.DetectContentType(buffer)),        ContentDisposition:   aws.String(&quot;attachment&quot;),        ServerSideEncryption: aws.String(&quot;AES256&quot;),    })    return err}type Config struct {    Db DBConfigInfo    S3 S3ConfigInfo}type DBConfigInfo struct {    Dialect  string `yaml:&quot;dialect&quot;`    User     string `yaml:&quot;user&quot;`    Password string `yaml:&quot;password&quot;`    Host     string `yaml:&quot;host&quot;`    Port     string `yaml:&quot;port&quot;`    Database string `yaml:&quot;database&quot;`    Charset  string `yaml:&quot;charset&quot;`}type S3ConfigInfo struct {    AccessKey     string `yaml:&quot;access_key&quot;`    SecretKey     string `yaml:&quot;secret_key&quot;`    EndPoint      string `yaml:&quot;end_point&quot;`    Bucket        string `yaml:&quot;bucket&quot;`}</code></pre><h3 id="7-重构为并行处理"><a href="#7-重构为并行处理" class="headerlink" title="7 重构为并行处理"></a>7 重构为并行处理</h3><p>单条处理耗时较久，尝试使用goroutine重构，提升性能<br>snapshot.go</p><pre><code class="go">package mainimport (    &quot;io/ioutil&quot;    yaml &quot;gopkg.in/yaml.v2&quot;    &quot;bytes&quot;    //&quot;fmt&quot;    &quot;log&quot;    &quot;path&quot;    &quot;path/filepath&quot;    &quot;strings&quot;    &quot;os&quot;    &quot;os/exec&quot;    &quot;database/sql&quot;    _ &quot;github.com/go-sql-driver/mysql&quot;    &quot;time&quot;    &quot;net/http&quot;    &quot;github.com/aws/aws-sdk-go/aws&quot;    &quot;github.com/aws/aws-sdk-go/aws/credentials&quot;    &quot;github.com/aws/aws-sdk-go/aws/session&quot;    &quot;github.com/aws/aws-sdk-go/service/s3&quot;)var db *sql.DBvar s *session.Sessionvar quit = make(chan int64, 100)func main() {    var (        Config Config    )    data, err := ioutil.ReadFile(&quot;conf/conf.yaml&quot;)    if err != nil {        checkErr(err)    }    err = yaml.Unmarshal(data, &amp;Config)    if err != nil {        checkErr(err)    }    //user:password@tcp(localhost:5555)/dbname?charset=utf8    db, err = sql.Open(Config.Db.Dialect, Config.Db.User + &quot;@tcp(&quot; + Config.Db.Host + &quot;:&quot; + Config.Db.Port + &quot;)/&quot; + Config.Db.Database + &quot;?charset=&quot; + Config.Db.Charset)    checkErr(err)    //query date    rows, err := db.Query(&quot;SELECT id, video_s3_url FROM material_video where video_thumb_url is null&quot;)    checkErr(err)    access_key := Config.S3.AccessKey    secret_key := Config.S3.SecretKey    end_point := Config.S3.EndPoint    bucket := Config.S3.Bucket    // Configure to use S3 Server    s, err = session.NewSession(&amp;aws.Config{        Region: aws.String(&quot;us-west-2&quot;),        Credentials: credentials.NewStaticCredentials( access_key, secret_key, &quot;&quot;),  // token can be left blank for now        Endpoint:         aws.String(end_point),        DisableSSL:       aws.Bool(true),        S3ForcePathStyle: aws.Bool(true),    })    if err != nil {        checkErr(err)    }    quit = make(chan int64)    cnt := 0    for rows.Next() {        var id int        var video_s3_url string        err = rows.Scan(&amp;id, &amp;video_s3_url)        checkErr(err)        go process(id, video_s3_url, bucket, end_point)        if cnt % 100 == 0 {            for i := cnt; i &gt; 0; i-- {                &lt;- quit            }        }        cnt++    }    //log.Println(cnt)    for i := cnt; i &gt; 0; i-- {        &lt;- quit    }}func process(id int, video_s3_url string, bucket string, end_point string) int64 {    fullpath := video_s3_url    fileSuffix := path.Ext(fileName)    fileSingleName := strings.TrimSuffix(fileName, fileSuffix)    output := fileSingleName + &quot;.png&quot;     log.Println(output)    //delete exist file    //_ = os.Remove(output);    //if err != nil {    //    log.Println(err)    //}    log.Println(&quot;ffmpeg&quot;, &quot;-i&quot;, fullpath, &quot;-vframes&quot;, &quot;1&quot;, &quot;-ss&quot;, &quot;3&quot;, &quot;-t&quot;, &quot;1&quot;, output)    cmd := exec.Command(&quot;ffmpeg&quot;, &quot;-i&quot;, fullpath, &quot;-vframes&quot;, &quot;1&quot;, &quot;-ss&quot;, &quot;3&quot;, &quot;-t&quot;, &quot;1&quot;, output)    var buffer bytes.Buffer    cmd.Stdout = &amp;buffer    if cmd.Run() != nil {        //panic(&quot;could not generate frame&quot;)        log.Println(&quot;could not generate frame&quot;)    }    // Upload    err := AddFileToS3(bucket, output)    if err != nil {        log.Println(&quot;could not update to s3&quot;)        checkErr(err)    }    log.Println(output, &quot;update to s3&quot;)    thumb_url := end_point + &quot;/&quot; + bucket + &quot;/&quot; + output    //update db    timeStr := time.Now().Format(&quot;2006-01-02 15:04:05&quot;)    log.Println(&quot;update material_video set video_thumb_url=&#39;&quot;, thumb_url, &quot;&#39;, update_time=&#39;&quot;, timeStr, &quot;&#39; where id=&quot;, id)    stmt, err := db.Prepare(&quot;update material_video set video_thumb_url=?, update_time=? where id=?&quot;)    defer stmt.Close()    checkErr(err)    res, err := stmt.Exec(thumb_url, timeStr, id)    //log.Println(&quot;res&quot;, res)    checkErr(err)    affect, err := res.RowsAffected()    checkErr(err)    _ = os.Remove(output);    quit &lt;- affect    return affect}func checkErr(err error) {    if err != nil {        log.Println(err)        panic(err)    }}func AddFileToS3(bucket string, fileDir string) error {    // Open the file for use    file, err := os.Open(fileDir)    if err != nil {        log.Println(err)        return err    }    defer file.Close()    // Get file size and read the file content into a buffer    fileInfo, _ := file.Stat()    var size int64 = fileInfo.Size()    buffer := make([]byte, size)    file.Read(buffer)    // Config settings: this is where you choose the bucket, filename, content-type etc.    // of the file you&#39;re uploading.    _, err = s3.New(s).PutObject(&amp;s3.PutObjectInput{        Bucket:               aws.String(bucket),        Key:                  aws.String(fileDir),        //ACL:                  aws.String(&quot;private&quot;),        Body:                 bytes.NewReader(buffer),        ContentLength:        aws.Int64(size),        ContentType:          aws.String(http.DetectContentType(buffer)),        ContentDisposition:   aws.String(&quot;attachment&quot;),        ServerSideEncryption: aws.String(&quot;AES256&quot;),    })    return err}type Config struct {    Db DBConfigInfo    S3 S3ConfigInfo}type DBConfigInfo struct {    Dialect  string `yaml:&quot;dialect&quot;`    User     string `yaml:&quot;user&quot;`    Password string `yaml:&quot;password&quot;`    Host     string `yaml:&quot;host&quot;`    Port     string `yaml:&quot;port&quot;`    Database string `yaml:&quot;database&quot;`    Charset  string `yaml:&quot;charset&quot;`}type S3ConfigInfo struct {    AccessKey     string `yaml:&quot;access_key&quot;`    SecretKey     string `yaml:&quot;secret_key&quot;`    EndPoint      string `yaml:&quot;end_point&quot;`    Bucket        string `yaml:&quot;bucket&quot;`}</code></pre><p><strong>此处，对于新手需要注意：</strong></p><p>在启动协程后，实际处理过程类似于在主线程中fork出子线程，由子线程完成实际的任务处理，但是，如果主线程没有等待协程处理完返回，特别是循环启动大批量协程的场景，则可能出现不是所有协程都被启动，或者协程处理没有正常返回等问题；<br>对于这种情况，golang中提供了四种方式实现goroutine与主线程同步</p><ol><li>time.sleep()，这种方式较死板，不建议使用</li><li>使用channel机制，每个goroutine传一个channel进去然后往里写数据，在再主线程中读取这些channel，直到全部读到数据了子goroutine也就全部运行完了，那么主goroutine也就可以结束了。这种模式是子线程去通知主线程结束。</li><li>使用context中cancel函数，这种模式是主线程去通知子线程结束。</li><li>sync.WaitGroup模式，Add方法设置等待子goroutine的数量，使用Done方法设置等待子goroutine的数量减1，当等待的数量等于0时，Wait函数返回。</li></ol><h3 id="8-限制并发协程"><a href="#8-限制并发协程" class="headerlink" title="8 限制并发协程"></a>8 限制并发协程</h3><p>测试发现，使用goroutine并发，理论上可以快速处理批量任务，但是实际处理时，需要考虑数据库连接数及服务器CPU和内存等限制，考虑使用线程池的方式，限制同时处理任务的协程数</p><pre><code class="go">package mainimport (    &quot;io/ioutil&quot;    yaml &quot;gopkg.in/yaml.v2&quot;    &quot;bytes&quot;    //&quot;fmt&quot;    &quot;log&quot;    &quot;path&quot;    &quot;path/filepath&quot;    &quot;strings&quot;    &quot;os&quot;    &quot;os/exec&quot;    &quot;database/sql&quot;    _ &quot;github.com/go-sql-driver/mysql&quot;    &quot;time&quot;    &quot;net/http&quot;    &quot;github.com/aws/aws-sdk-go/aws&quot;    &quot;github.com/aws/aws-sdk-go/aws/credentials&quot;    &quot;github.com/aws/aws-sdk-go/aws/session&quot;    &quot;github.com/aws/aws-sdk-go/service/s3&quot;    &quot;sync&quot;    &quot;github.com/panjf2000/ants&quot;)var db *sql.DBvar s *session.Sessionfunc main() {    var (        Config Config        goSync sync.WaitGroup    )    data, err := ioutil.ReadFile(&quot;conf/conf.yaml&quot;)    if err != nil {        checkErr(err)    }    err = yaml.Unmarshal(data, &amp;Config)    if err != nil {        checkErr(err)    }    //user:password@tcp(localhost:5555)/dbname?charset=utf8    db, err = sql.Open(Config.Db.Dialect, Config.Db.User + &quot;@tcp(&quot; + Config.Db.Host + &quot;:&quot; + Config.Db.Port + &quot;)/&quot; + Config.Db.Database + &quot;?charset=&quot; + Config.Db.Charset)    checkErr(err)    //query date    rows, err := db.Query(&quot;SELECT id, video_s3_url FROM material_video where video_thumb_url is null&quot;)    checkErr(err)    access_key := Config.S3.AccessKey    secret_key := Config.S3.SecretKey    end_point := Config.S3.EndPoint    bucket := Config.S3.Bucket    // Configure to use S3 Server    s, err = session.NewSession(&amp;aws.Config{        Region: aws.String(&quot;us-west-2&quot;),        Credentials: credentials.NewStaticCredentials( access_key, secret_key, &quot;&quot;),  // token can be left blank for now        Endpoint:         aws.String(end_point),        DisableSSL:       aws.Bool(true),        S3ForcePathStyle: aws.Bool(true),    })    if err != nil {        checkErr(err)    }    defer ants.Release()    p, _ := ants.NewPoolWithFunc(Config.Pool.MaxNum, func(params interface{}) {        var id int        var video_s3_url string        for k, v := range params.(map[string]interface{}){            if k == &quot;id&quot; {                id = v.(int)            }            if k == &quot;video_s3_url&quot; {                video_s3_url = v.(string)            }        }        process(id, video_s3_url, bucket, end_point)        goSync.Done()    })    defer p.Release()    cnt := 0    for rows.Next() {        var id int        var video_s3_url string        err = rows.Scan(&amp;id, &amp;video_s3_url)        checkErr(err)        log.Println(id, video_s3_url, bucket, end_point)        params := make(map[string]interface{})        params[&quot;id&quot;] = id        params[&quot;video_s3_url&quot;] = video_s3_url        goSync.Add(1)        _ = p.Invoke(params)        cnt++    }    log.Println(cnt)    goSync.Wait()    //log.Printf(&quot;running goroutines: %d\n&quot;, ants.Running())    log.Printf(&quot;finish all tasks.\n&quot;)}func process(id int, video_s3_url string, bucket string, end_point string) int64 {    fullpath := video_s3_url    fileName := filepath.Base(fullpath)    fileSuffix := path.Ext(fileName)    fileSingleName := strings.TrimSuffix(fileName, fileSuffix)    output := fileSingleName + &quot;.png&quot;     log.Println(output)    //delete exist file    //_ = os.Remove(output);    //if err != nil {    //    log.Println(err)    //}    log.Println(&quot;ffmpeg&quot;, &quot;-i&quot;, fullpath, &quot;-vframes&quot;, &quot;1&quot;, &quot;-ss&quot;, &quot;3&quot;, &quot;-t&quot;, &quot;1&quot;, output)    cmd := exec.Command(&quot;ffmpeg&quot;, &quot;-i&quot;, fullpath, &quot;-vframes&quot;, &quot;1&quot;, &quot;-ss&quot;, &quot;3&quot;, &quot;-t&quot;, &quot;1&quot;, output)    var buffer bytes.Buffer    cmd.Stdout = &amp;buffer    if cmd.Run() != nil {        //panic(&quot;could not generate frame&quot;)        log.Println(&quot;could not generate frame&quot;)    }    // Upload    err := AddFileToS3(bucket, output)    if err != nil {        log.Println(&quot;could not update to s3&quot;)        checkErr(err)    }    log.Println(output, &quot;update to s3&quot;)    thumb_url := end_point + &quot;/&quot; + bucket + &quot;/&quot; + output    //update db    timeStr := time.Now().Format(&quot;2006-01-02 15:04:05&quot;)    log.Println(&quot;update material_video set video_thumb_url=&#39;&quot;, thumb_url, &quot;&#39;, update_time=&#39;&quot;, timeStr, &quot;&#39; where id=&quot;, id)    stmt, err := db.Prepare(&quot;update material_video set video_thumb_url=?, update_time=? where id=?&quot;)    defer stmt.Close()    checkErr(err)    res, err := stmt.Exec(thumb_url, timeStr, id)    checkErr(err)    affect, err := res.RowsAffected()    checkErr(err)    _ = os.Remove(output);    return affect}func checkErr(err error) {    if err != nil {        log.Println(err)        panic(err)    }}func AddFileToS3(bucket string, fileDir string) error {    // Open the file for use    file, err := os.Open(fileDir)    if err != nil {        log.Println(err)        return err    }    defer file.Close()    // Get file size and read the file content into a buffer    fileInfo, _ := file.Stat()    var size int64 = fileInfo.Size()    buffer := make([]byte, size)    file.Read(buffer)    // Config settings: this is where you choose the bucket, filename, content-type etc.    // of the file you&#39;re uploading.    _, err = s3.New(s).PutObject(&amp;s3.PutObjectInput{        Bucket:               aws.String(bucket),        Key:                  aws.String(fileDir),        //ACL:                  aws.String(&quot;private&quot;),        Body:                 bytes.NewReader(buffer),        ContentLength:        aws.Int64(size),        ContentType:          aws.String(http.DetectContentType(buffer)),        ContentDisposition:   aws.String(&quot;attachment&quot;),        ServerSideEncryption: aws.String(&quot;AES256&quot;),    })    return err}type Config struct {    Db   DBConfigInfo    S3   S3ConfigInfo    Pool GoroutinePoolInfo}type DBConfigInfo struct {    Dialect  string `yaml:&quot;dialect&quot;`    User     string `yaml:&quot;user&quot;`    Password string `yaml:&quot;password&quot;`    Host     string `yaml:&quot;host&quot;`    Port     string `yaml:&quot;port&quot;`    Database string `yaml:&quot;database&quot;`    Charset  string `yaml:&quot;charset&quot;`}type S3ConfigInfo struct {    AccessKey     string `yaml:&quot;access_key&quot;`    SecretKey     string `yaml:&quot;secret_key&quot;`    EndPoint      string `yaml:&quot;end_point&quot;`    Bucket        string `yaml:&quot;bucket&quot;`}type GoroutinePoolInfo struct {    MaxNum string `yaml:&quot;max_num&quot;`}</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://stackoverflow.com/questions/35411585/first-frame-of-video" target="_blank" rel="noopener">https://stackoverflow.com/questions/35411585/first-frame-of-video</a><br><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/05.2.md" target="_blank" rel="noopener">https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/05.2.md</a><br><a href="http://www.hatlonely.com/2018/03/04/golang-aws-sdk-go-%E4%B9%8B-s3-%E6%9C%8D%E5%8A%A1/index.html" target="_blank" rel="noopener">http://www.hatlonely.com/2018/03/04/golang-aws-sdk-go-%E4%B9%8B-s3-%E6%9C%8D%E5%8A%A1/index.html</a><br><a href="https://mlog.club/article/293940" target="_blank" rel="noopener">https://mlog.club/article/293940</a><br><a href="https://colobu.com/2016/12/21/how-to-dump-goroutine-stack-traces/" target="_blank" rel="noopener">https://colobu.com/2016/12/21/how-to-dump-goroutine-stack-traces/</a><br><a href="https://mp.weixin.qq.com/s/aoWQSxrXXZUtJh48tmqMkA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/aoWQSxrXXZUtJh48tmqMkA</a><br><a href="https://www.cnblogs.com/node-js/p/8964171.html" target="_blank" rel="noopener">https://www.cnblogs.com/node-js/p/8964171.html</a><br><a href="https://www.cnblogs.com/williamjie/p/9267741.html" target="_blank" rel="noopener">https://www.cnblogs.com/williamjie/p/9267741.html</a><br><a href="https://github.com/panjf2000/ants" target="_blank" rel="noopener">https://github.com/panjf2000/ants</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows程序员常见乱码问题汇总</title>
      <link href="/2019/08/18/gibberish/"/>
      <url>/2019/08/18/gibberish/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>名称</th><th>示例</th><th>特点</th><th>产生原因</th></tr></thead><tbody><tr><td>古文码</td><td>鍝堝搱鐪嬪埌瀹堕噷鐫″ぇ瑙�</td><td>大都为不认识的古文，夹杂日韩文</td><td>以GBK方式读取UTF-8编码的中文</td></tr><tr><td>口子码</td><td>�����������</td><td>大部分字符为小方块</td><td>以UTF-8方式读取GBK编码的中文</td></tr><tr><td>符号码</td><td>å“ˆå“ˆçœ‹åˆ°å®¶é‡Œç¡å¤§è§‰</td><td>大部分字符为各种符号</td><td>以ISO8859-1方式读取UTF-8编码的中文</td></tr><tr><td>拼音码</td><td>¿¨·É»úÉÏµÄ</td><td>大部分字符为头顶带各种类似声调符号的字母</td><td>以ISO8859-1方式读取GBK编码的中文</td></tr><tr><td>问句码</td><td>幽月要好好学习天天向??</td><td>字符串长度为偶数时正常，长度为奇数时最后几个字符变为问号</td><td>以GBK的方式读取UTF-8编码的中文，然后用UTF-8格式再次读取</td></tr><tr><td>锟拷码</td><td>锟斤拷锟斤拷锟斤拷锟</td><td>全中文字符，且大部分文字为“锟斤拷”几个字符</td><td>以UTF-8方式读取GBK编码的中文，然后用GBK格式再次读取</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> charset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router+nginx 路径配置方法</title>
      <link href="/2019/08/11/vue-route-nginx/"/>
      <url>/2019/08/11/vue-route-nginx/</url>
      
        <content type="html"><![CDATA[<p>vue-router 的默认数据hash模式-使用url的hash来模拟一个完整的URL，于是当URL改变时，页面不会重新加载。</p><p>一般情况下，我们不喜欢丑丑的hash，类似于index.html#/matchResult，可以使用路由的history模式。history模式是利用history.pushState API来实现页面跳转。</p><p>但是有个问题，在使用nginx的时候，我们需要添加一些配置。</p><h2 id="直接配置在根路径下"><a href="#直接配置在根路径下" class="headerlink" title="直接配置在根路径下"></a>直接配置在根路径下</h2><p>直接配置在根路径下，访问的时候只用输入<a href="http://yoursite.com/" target="_blank" rel="noopener">http://yoursite.com</a>，在nginx的配置如下</p><pre><code>location / {  try_files $uri $uri/ /index.html;}</code></pre><h2 id="非根路径配置"><a href="#非根路径配置" class="headerlink" title="非根路径配置"></a>非根路径配置</h2><p>如果一个域名下有多个项目，那么使用根路径配置就不合适了，我们需要在根路径下指定一层路径，比如说</p><p>A项目</p><pre><code>http://yoursite.com/A</code></pre><p>B项目</p><pre><code>http://yoursite.com/B</code></pre><p>nginx的配置</p><pre><code>    location ^~/A {            alias /XX/A;//此处为A的路径            index index.html;            try_files $uri $uri/ /A/index.html;    }    location ^~/B {            alias /XX/B;//此处为B的路径            index index.html;            try_files $uri $uri/ /B/index.html;    }</code></pre><p><strong>tip: 注意要用alias不能用root</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue, nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP基础知识</title>
      <link href="/2019/08/03/http-101/"/>
      <url>/2019/08/03/http-101/</url>
      
        <content type="html"><![CDATA[<p>了解HTTP基础知识，对日常工作中web开发和问题排查有很大的帮助，在没有一定的项目经验之前学习这些基础知识会有一些困扰，但有过一定开发经验，尤其是遇到问题碰过几次壁之后再回来学习这些相关内容就会有不一样的感受了</p><h2 id="1-URI和URL"><a href="#1-URI和URL" class="headerlink" title="1. URI和URL"></a>1. URI和URL</h2><p>这里我们先了解一下URI和URL，URI的全称为Uniform Resource Identifier，即统一资源标志符，URL的全称为Universal Resource Locator，即统一资源定位符。</p><p>举例来说，<a href="https://github.com/favicon.ico" target="_blank" rel="noopener">github.com/favicon.ico</a>是GitHub的网站图标链接，它是一个URL，也是一个URI。即有这样的一个图标资源，我们用URL/URI来唯一指定了它的访问方式，这其中包括了访问协议https、访问路径（/即根目录）和资源名称favicon.ico。通过这样一个链接，我们便可以从互联网上找到这个资源，这就是URL/URI。</p><p>URL是URI的子集，也就是说每个URL都是URI，但不是每个URI都是URL。那么，怎样的URI不是URL呢？URI还包括一个子类叫作URN，它的全称为Universal Resource Name，即统一资源名称。URN只命名资源而不指定如何定位资源，比如urn:isbn:0451450523指定了一本书的ISBN，可以唯一标识这本书，但是没有指定到哪里定位这本书，这就是URN。</p><p>但在目前互联网中，几乎所有的URI都是URL，长久以后，我们一般都把网页链接统称为URL。</p><h2 id="2-URL完整格式"><a href="#2-URL完整格式" class="headerlink" title="2. URL完整格式"></a>2. URL完整格式</h2><p>在平常对前端同学的面试中，我都会让面试者解释他们对URL的了解，很多人都只能简单的说域名和请求路径两部分，但这明显是不完整的，也正因为对URL格式理解的不完整，导致在遇到一些特殊格式链接地址时手足无措。</p><p>一个完整的URL链接格式</p><pre><code>scheme://[username[:password]@]hostname[:port]/path/[;parameter]/[?query][#fragment]</code></pre><p>各部分说明如下，其中括号部分为可选项</p><table><thead><tr><th>字段</th><th>名 称</th><th>说明</th></tr></thead><tbody><tr><td>scheme</td><td>协议</td><td>该链接地址使用的协议，常用的协议是http和https，其他ftp, file, nfs, sftp 等也都是合法的协议</td></tr><tr><td>://</td><td>分隔符</td><td>以此符号分隔协议和其他部分</td></tr><tr><td>hostname</td><td>主机名</td><td>指明链接所在服务器的地址，可以是域名或IP地址</td></tr><tr><td>hort</td><td>端口</td><td>提供服务的端口，针对不同协议有默认端口，如http对应80端口，https对应443端口，也可以自定义</td></tr><tr><td>path</td><td>路径</td><td>网络资源在服务器中的指定路径</td></tr><tr><td>;parameter</td><td>参数</td><td>可用于向服务器传入请求参数，用键值对表示，现在比较少见这种传递参数方式</td></tr><tr><td>?query</td><td>查询</td><td>用?将url的路径部分和其他部分区分开，大多服务端框架也习惯将get参数拼做query方式传递；注意：由于可能有异常导致出现多个问号，服务端会做一定的容错处理，截取后一段query的情况比较常见</td></tr><tr><td>#fragment</td><td>片段</td><td>一小片或者一部分资源的名字。引用对象时，不会将frag字段传送给服务器。这个字段是在客户端内部使用的。通过字符”#”将其与URL的其余部分分隔开来。静态页面通常用片段配合锚点直接定位到页面的某个部分</td></tr><tr><td>username[:password]@</td><td>用户名密码</td><td>有一些服务（ftp）需要提供用户名密码验证，可以采用这种方式</td></tr></tbody></table><h2 id="3-HTTP和HTTPS"><a href="#3-HTTP和HTTPS" class="headerlink" title="3. HTTP和HTTPS"></a>3. HTTP和HTTPS</h2><p>HTTP全称是Hyper Text Transfer Protocol，用于从网络传输超文本数据到本地浏览器的传送协议，目前广泛使用的是HTTP 1.1版本</p><p>HTTPS的全称是Hyper Text Transfer Protocol over Secure Socket Layer，是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，简称为HTTPS。</p><p>HTTPS的安全基础是SSL，主要作用是通过建立一个信息安全通道来保证数据传输安全，并且可以通过安全证书保证网站的真实性；HTTPS是未来发展的方向，越来越多的网站都要求将HTTPS作为标准服务。</p><h2 id="4-HTTP请求过程"><a href="#4-HTTP请求过程" class="headerlink" title="4. HTTP请求过程"></a>4. HTTP请求过程</h2><p>我们在浏览器中输入一个URL，回车之后便会在浏览器中观察到页面内容。实际上，这个过程是浏览器向网站所在的服务器发送了一个请求，网站服务器接收到这个请求后进行处理和解析，然后返回对应的响应，接着传回给浏览器。响应里包含了页面的源代码等内容，浏览器再对其进行解析，便将网页呈现了出来。</p><p>为了更直观地地说明这个过程，这里用Chrome浏览器的开发者模式下的Network监听组件来做下演示，它可以显示访问当前请求网页时发生的所有网络请求和响应。</p><p>打开Chrome浏览器，右击并选择“检查”项，即可打开浏览器的开发者工具。这里访问百度<a href="https://www.github.com" target="_blank" rel="noopener">www.github.com/</a>，输入该URL后回车，观察这个过程中发生了怎样的网络请求。可以看到，在Network页面下方出现了一个个的条目，其中一个条目就代表一次发送请求和接收响应的过程，如图所示</p><p><img src="./resource/github_net.png" alt="github_net"></p><p>我们先观察网络请求，其中各列的含义如下。</p><ul><li><strong>第一列Name</strong>：请求的名称，一般会将URL的最后一部分内容当作名称。</li><li><strong>第二列Status</strong>：响应的状态码，这里显示为307，代表临时重定向。通过状态码，我们可以判断发送了请求之后是否得到了正常的响应。</li><li><strong>第三列Type</strong>：请求的文档类型。这里为document，代表我们这次请求的是一个HTML文档，内容就是一些HTML代码。</li><li><strong>第四列Initiator</strong>：请求源。用来标记请求是由哪个对象或进程发起的。</li><li><strong>第五列Size</strong>：从服务器下载的文件和请求的资源大小。如果是从缓存中取得的资源，则该列会显示from cache。</li><li><strong>第六列Time</strong>：发起请求到获取响应所用的总时间。</li><li><strong>第七列Waterfall</strong>：网络请求的可视化瀑布流。</li></ul><p>点击这个条目，即可看到更详细的信息<br>首先是General部分，Request URL为请求的URL，Request Method为请求的方法，Status Code为响应状态码，Remote Address为远程服务器的地址和端口，Referrer Policy为Referrer判别策略。</p><p>再继续往下看，可以看到，有Response Headers和Request Headers，这分别代表响应头和请求头。请求头里带有许多请求信息，例如浏览器标识、Cookies、Host等信息，这是请求的一部分，服务器会根据请求头内的信息判断请求是否合法，进而作出对应的响应。图中看到的Response Headers就是响应的一部分，例如其中包含了服务器的类型、文档类型、日期等信息，浏览器接受到响应后，会解析响应内容，进而呈现网页内容。</p><p>下面我们分别来介绍一下请求和响应都包含哪些内容。</p><h2 id="5-请求"><a href="#5-请求" class="headerlink" title="5. 请求"></a>5. 请求</h2><p>请求，由客户端向服务端发出，可以分为4部分内容：请求方法（Request Method）、请求的网址（Request URL）、请求头（Request Headers）、请求体（Request Body）。</p><h3 id="5-1-请求方法"><a href="#5-1-请求方法" class="headerlink" title="5.1 请求方法"></a>5.1 请求方法</h3><p>常见的请求方法有GET和POST，GET和POST请求方法有如下区别。</p><ul><li>GET请求中的参数包含在URL里面，数据可以在URL中看到，而POST请求的URL不会包含这些数据，数据都是通过表单形式传输的，会包含在请求体中。</li><li>GET请求提交的数据最多只有1024字节，而POST方式没有限制。</li></ul><p>一般来说，登录时，需要提交用户名和密码，其中包含了敏感信息，使用GET方式请求的话，密码就会暴露在URL里面，造成密码泄露，所以这里最好以POST方式发送。上传文件时，由于文件内容比较大，也会选用POST方式。</p><p>我们平常遇到的绝大部分请求都是GET或POST请求，另外还有一些请求方法，如GET、HEAD、POST、PUT、DELETE、OPTIONS、CONNECT、TRACE等，我们简单将其总结为下表</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>请求页面，并返回页面内容</td></tr><tr><td>HEAD</td><td>类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>POST</td><td>大多用于提交表单或上传文件，数据包含在请求体中</td></tr><tr><td>PUT</td><td>从客户端向服务器传送的数据取代指定文档中的内容</td></tr><tr><td>DELETE</td><td>请求服务器删除指定的页面</td></tr><tr><td>CONNECT</td><td>把服务器当作跳板，让服务器代替客户端访问其他网页</td></tr><tr><td>OPTIONS</td><td>允许客户端查看服务器的性能</td></tr><tr><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断</td></tr></tbody></table><h3 id="5-2-请求网址"><a href="#5-2-请求网址" class="headerlink" title="5.2 请求网址"></a>5.2 请求网址</h3><p>请求的网址，即统一资源定位符URL，它可以唯一确定我们想请求的资源。</p><h3 id="5-3-请求头"><a href="#5-3-请求头" class="headerlink" title="5.3 请求头"></a>5.3 请求头</h3><p>请求头，用来说明服务器要使用的附加信息，比较重要的信息有Cookie、Referer、User-Agent等。下面简要说明一些常用的头信息。</p><ul><li><strong>Accept</strong>：请求报头域，用于指定客户端可接受哪些类型的信息。</li><li><strong>Accept-Language</strong>：指定客户端可接受的语言类型。</li><li><strong>Accept-Encoding</strong>：指定客户端可接受的内容编码。</li><li><strong>Host</strong>：用于指定请求资源的主机IP和端口号，其内容为请求URL的原始服务器或网关的位置。从HTTP 1.1版本开始，请求必须包含此内容。</li><li><strong>Cookie</strong>：也常用复数形式 Cookies，这是网站为了辨别用户进行会话跟踪而存储在用户本地的数据。它的主要功能是维持当前访问会话。例如，我们输入用户名和密码成功登录某个网站后，服务器会用会话保存登录状态信息，后面我们每次刷新或请求该站点的其他页面时，会发现都是登录状态，这就是Cookies的功劳。Cookies里有信息标识了我们所对应的服务器的会话，每次浏览器在请求该站点的页面时，都会在请求头中加上Cookies并将其发送给服务器，服务器通过Cookies识别出是我们自己，并且查出当前状态是登录状态，所以返回结果就是登录之后才能看到的网页内容。</li><li><strong>Referer</strong>：此内容用来标识这个请求是从哪个页面发过来的，服务器可以拿到这一信息并做相应的处理，如作来源统计、防盗链处理等。</li><li><strong>User-Agent</strong>：简称UA，它是一个特殊的字符串头，可以使服务器识别客户使用的操作系统及版本、浏览器及版本等信息。在做爬虫时加上此信息，可以伪装为浏览器；如果不加，很可能会被识别出为爬虫。</li><li><strong>Content-Type</strong>：也叫互联网媒体类型（Internet Media Type）或者MIME类型，在HTTP协议消息头中，它用来表示具体请求中的媒体类型信息。例如，text/html代表HTML格式，image/gif代表GIF图片，application/json代表JSON类型，更多对应关系可以查看此对照表：<a href="https://tool.oschina.net/commons" target="_blank" rel="noopener">tool.oschina.net/commons</a>。</li></ul><h3 id="5-4-请求体"><a href="#5-4-请求体" class="headerlink" title="5.4 请求体"></a>5.4 请求体</h3><p>请求体一般承载的内容是POST请求中的表单数据，而对于GET请求，请求体则为空。需要注意Request Headers中指定Content-Type和POST内容的关系</p><table><thead><tr><th>Content-Type</th><th>提交数据的方式</th></tr></thead><tbody><tr><td>application/x-www-form-urlencoded</td><td>表单数据</td></tr><tr><td>multipart/form-data</td><td>文件上传</td></tr><tr><td>application/json</td><td>序列化json数据</td></tr><tr><td>text/xml</td><td>xml数据</td></tr></tbody></table><h2 id="6-响应"><a href="#6-响应" class="headerlink" title="6. 响应"></a>6. 响应</h2><p>响应，由服务端返回给客户端，可以分为三部分：响应状态码（Response Status Code）、响应头（Response Headers）和响应体（Response Body）。</p><h3 id="6-1-响应状态码"><a href="#6-1-响应状态码" class="headerlink" title="6.1 响应状态码"></a>6.1 响应状态码</h3><p>http响应状态码表示服务器的响应状态，2XX表示服务正常，3XX一般为重定向，4XX一般为客户端请求异常，5XX为服务端异常<br>常见的错误代码及错误原因</p><table><thead><tr><th>状态码</th><th>说明</th><th>详情</th></tr></thead><tbody><tr><td>100</td><td>继续</td><td>请求者应当继续提出请求。服务器已收到请求的一部分，正在等待其余部分</td></tr><tr><td>101</td><td>切换协议</td><td>请求者已要求服务器切换协议，服务器已确认并准备切换</td></tr><tr><td>200</td><td>成功</td><td>服务器已成功处理了请求</td></tr><tr><td>201</td><td>创建成功</td><td>请求成功并且服务器创建了新的资源</td></tr><tr><td>202</td><td>已接收</td><td>服务器已接受请求，但尚未处理</td></tr><tr><td>203</td><td>非授权信息</td><td>服务器已成功处理了请求，但返回的信息可能来自另一个源</td></tr><tr><td>204</td><td>无内容</td><td>服务器成功处理了请求，但没有返回任何内容</td></tr><tr><td>205</td><td>重置内容</td><td>服务器成功处理了请求，内容被重置</td></tr><tr><td>206</td><td>部分内容</td><td>服务器成功处理了部分请求</td></tr><tr><td>300</td><td>多种选择</td><td>针对请求，服务器可执行多种操作</td></tr><tr><td>301</td><td>永久移动</td><td>请求的网页已永久移动到新位置，即永久重定向</td></tr><tr><td>302</td><td>临时移动</td><td>请求的网页暂时跳转到其他页面，即暂时重定向</td></tr><tr><td>303</td><td>查看其他位置</td><td>如果原来的请求是POST，重定向目标文档应该通过GET提取</td></tr><tr><td>304</td><td>未修改</td><td>此次请求返回的网页未修改，继续使用上次的资源</td></tr><tr><td>305</td><td>使用代理</td><td>请求者应该使用代理访问该网页</td></tr><tr><td>307</td><td>临时重定向</td><td>请求的资源临时从其他位置响应</td></tr><tr><td>400</td><td>错误请求</td><td>服务器无法解析该请求，如用http请求一个https服务</td></tr><tr><td>401</td><td>未授权</td><td>请求没有进行身份验证或验证未通过</td></tr><tr><td>403</td><td>禁止范围</td><td>服务器拒绝此请求</td></tr><tr><td>404</td><td>未找到</td><td>服务器找不到请求的网页</td></tr><tr><td>405</td><td>方法禁用</td><td>服务器禁用了请求中指定的方法，如用GET请求一个只能用POST访问的地址</td></tr><tr><td>406</td><td>不接受</td><td>无法使用请求的内容响应请求的网页</td></tr><tr><td>407</td><td>需要代理授权</td><td>请求者需要使用代理授权</td></tr><tr><td>408</td><td>请求超时</td><td>服务器请求超时</td></tr><tr><td>409</td><td>冲突</td><td>服务器在完成请求时发生冲突</td></tr><tr><td>410</td><td>已删除</td><td>请求的资源已永久删除</td></tr><tr><td>411</td><td>需要有效长度</td><td>服务器不接受不含有效内容长度标头字段的请求</td></tr><tr><td>412</td><td>未满足前提条件</td><td>服务器未满足请求者在请求中设置的其中一个前提条件</td></tr><tr><td>413</td><td>请求实体过大</td><td>请求实体过大，超出服务器的处理能力</td></tr><tr><td>414</td><td>请求URI过大</td><td>请求网址过长，服务器无法处理</td></tr><tr><td>415</td><td>不支持类型</td><td>请求格式不被请求页面支持</td></tr><tr><td>416</td><td>请求范围不符</td><td>页面无法提供请求的范围</td></tr><tr><td>417</td><td>未满足期望值</td><td>服务器未满足期望请求标头字段的要求</td></tr><tr><td>500</td><td>服务器内部错误</td><td>服务器遇到错误，无法完成请求</td></tr><tr><td>501</td><td>未实现</td><td>服务器不具备完成请求的功能</td></tr><tr><td>502</td><td>错误网关</td><td>服务器作为网关或代理，从上游服务器收到无效响应</td></tr><tr><td>503</td><td>服务不可用</td><td>服务器目前无法使用，因为请求超出负载导致服务临时不可用，可能在短时间内恢复</td></tr><tr><td>504</td><td>网关超时</td><td>服务器作为网关或代理，但是没有及时从上游服务器收到请求</td></tr><tr><td>505</td><td>http版本不支持</td><td>服务器不支持请求中所用的HTTP协议版本</td></tr></tbody></table><p>更多内容参考 <a href="http://tool.oschina.net/commons?type=5" target="_blank" rel="noopener">http://tool.oschina.net/commons?type=5</a></p><h3 id="5-2-响应头"><a href="#5-2-响应头" class="headerlink" title="5.2 响应头"></a>5.2 响应头</h3><p>响应头包含了服务器对请求的应答信息，如Content-Type、Server、Set-Cookie等。下面简要说明一些常用的头信息。</p><ul><li><strong>Date</strong>：标识响应产生的时间。</li><li><strong>Last-Modified</strong>：指定资源的最后修改时间。</li><li><strong>Content-Encoding</strong>：指定响应内容的编码。</li><li><strong>Server</strong>：包含服务器的信息，比如名称、版本号等。</li><li><strong>Content-Type</strong>：文档类型，指定返回的数据类型是什么，如text/html代表返回HTML文档，application/x-javascript则代表返回JavaScript文件，image/jpeg则代表返回图片。</li><li><strong>Set-Cookie</strong>：设置Cookies。响应头中的Set-Cookie告诉浏览器需要将此内容放在Cookies中，下次请求携带Cookies请求。</li><li><strong>Expires</strong>：指定响应的过期时间，可以使代理服务器或浏览器将加载的内容更新到缓存中。如果再次访问时，就可以直接从缓存中加载，降低服务器负载，缩短加载时间。</li></ul><h3 id="5-3-响应体"><a href="#5-3-响应体" class="headerlink" title="5.3 响应体"></a>5.3 响应体</h3><p>最重要的当属响应体的内容了。响应的正文数据都在响应体中，比如请求网页时，它的响应体就是网页的HTML代码；请求一张图片时，它的响应体就是图片的二进制数据。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 多平台换行符问题(LF or CRLF)</title>
      <link href="/2019/04/24/git-lf-crlf/"/>
      <url>/2019/04/24/git-lf-crlf/</url>
      
        <content type="html"><![CDATA[<pre><code class="bash">$ git add .fatal: CRLF would be replaced by LF ...</code></pre><p><img src="https://wx1.sinaimg.cn/mw690/c3c88275ly1fdsav3d6yjj20hs0d5afx.jpg" alt></p><p><strong>文本文件所使用的换行符，在不同的系统平台上是不一样的</strong>。UNIX/Linux 使用的是 <code>0x0A（LF）</code>，早期的 Mac OS 使用的是 <code>0x0D（CR）</code>，后来的 OS X 在更换内核后与 UNIX 保持一致了。但 DOS/Windows 一直使用 <code>0x0D0A（CRLF）</code> 作为换行符。</p><p>跨平台协作开发是常有的，不统一的换行符确实对跨平台的文件交换带来了麻烦。最大的问题是，在不同平台上，换行符发生改变时，Git 会认为整个文件被修改，这就造成我们没法 <code>diff</code>，不能正确反映本次的修改。还好 Git 在设计时就考虑了这一点，其提供了一个 <code>autocrlf</code> 的配置项，用于在提交和检出时自动转换换行符，该配置有三个可选项：</p><ul><li><strong>true:</strong> 提交时转换为 LF，检出时转换为 CRLF</li><li><strong>false:</strong> 提交检出均不转换</li><li><strong>input:</strong> 提交时转换为LF，检出时不转换</li></ul><p>用如下命令即可完成配置：</p><pre><code># 提交时转换为LF，检出时转换为CRLFgit config --global core.autocrlf true# 提交时转换为LF，检出时不转换git config --global core.autocrlf input# 提交检出均不转换git config --global core.autocrlf false</code></pre><p>如果把 autocrlf 设置为 false 时，那另一个配置项 <code>safecrlf</code> 最好设置为 <strong>ture</strong>。该选项用于检查文件是否包含混合换行符，其有三个可选项：</p><ul><li><strong>true:</strong> 拒绝提交包含混合换行符的文件</li><li><strong>false:</strong> 允许提交包含混合换行符的文件</li><li><strong>warn:</strong> 提交包含混合换行符的文件时给出警告</li></ul><p>配置方法：</p><pre><code># 拒绝提交包含混合换行符的文件git config --global core.safecrlf true# 允许提交包含混合换行符的文件git config --global core.safecrlf false# 提交包含混合换行符的文件时给出警告git config --global core.safecrlf warn</code></pre><p>到此，还并未解决我遇到的问题。实际上，我们有两种办法解决。</p><p>一种是将配置项改为如下的形式：</p><pre><code>$ git config --global core.autocrlf false$ git config --global core.safecrlf false</code></pre><p>这种方式是不推荐的，虽然代码能被提交，但是项目中的文件可能会包含两种格式的换行符。而且会有如上提到的问题，文件被视为整个被修改，无法 diff，之所以使用版本控制工具，最重要的原因之一就是其 diff 功能。</p><p>另一种办法是，手动将文件的换行符转化为 LF，这可以通过编辑器来完成，大部分编辑器都可以将文件的换行符风格设置为 unix 的形式。也可以使用 <code>dos2unix</code> 转换工具来完成，Windows 上 Git bash 客户端自带了该工具。其他系统上也可以安装该工具，例如 Ubuntu 上安装：</p><blockquote><p>sudo apt-get install dos2unix</p></blockquote><p>有了该工具，可以批量的把项目中的文件都转化一遍：</p><blockquote><p>find . -type f | xargs dos2unix</p></blockquote><p>或者</p><blockquote><p>find . -type f -exec dos2unix {} +</p></blockquote><p>如果涉及到在多个系统平台上工作，推荐将 git 做如下配置：</p><pre><code>$ git config --global core.autocrlf input$ git config --global core.safecrlf true</code></pre><p>也就是让代码仓库使用统一的换行符(LF)，如果代码中包含 CRLF 类型的文件时将无法提交，需要用 <code>dos2unix</code> 或者其他工具手动转换文件类型。当然，可以根据自己的需要进行更为合适的配置！</p><h2 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h2><p>首先，不要着急去整 Git，先整好自己。你的团队需要确立一个统一的换行符标准（推荐使用 UNIX 风格）。然后，团队的成员们需要分头做好准备工作——配置好自己的代码编辑器和 IDE，达到这两项要求：</p><ul><li>在新建文件时默认使用团队统一的换行符标准</li><li>在打开文件时保持现有换行符格式不变（即不做自动转换）</li></ul><p>这样一方面可以最大程度保证项目代码的规范一致，另一方面，即使现有代码中遗留了一些不规范的情况，也不会因为反复转换而导致混乱。（当然，作为一个强迫症患者，我还是祝愿所有的项目从一开始就步入严谨有序的轨道。）</p><p>接下来，我们就可以开始调教 Git 了。我的建议是， <strong>完全关掉这个自作聪明的“换行符自动转换”功能</strong>。关闭之后，Git 就不会对你的换行符做任何手脚了，你可以完全自主地、可预期地控制自己的换行符风格。</p><p>下面主要针对不同的 Git 客户端，分别介绍一下操作方法。</p><h3 id="Git-for-Windows"><a href="#Git-for-Windows" class="headerlink" title="Git for Windows"></a>Git for Windows</h3><p>这货由 Git 官方出品，在安装时就会向你兜售“换行符自动转换”功能，估计大多数人在看完华丽丽的功能介绍之后会毫不犹豫地选择第一项（自动转换）。请千万抵挡住诱惑，选择最后一项（不做任何手脚）。</p><p><a href="https://camo.githubusercontent.com/c334a5644f69da294255a1de0a690239f8a83131/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313233313335392f3937343134392f64396564313662652d303634622d313165332d393336382d3831373138616563653335322e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/c334a5644f69da294255a1de0a690239f8a83131/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313233313335392f3937343134392f64396564313662652d303634622d313165332d393336382d3831373138616563653335322e706e67" alt="first-trap-on-github-autocrlf-git-install"></a></p><p>如果你已经做出了错误的选择，也不需要重新安装，可以直接使用命令行来修改设置。很简单，直接打开这货自带的命令行工具 Git Bash，输入以下命令，再敲回车即可：</p><pre><code class="source-shell">git config --global core.autocrlf false</code></pre><p><a href="https://camo.githubusercontent.com/47791095c618944f5838aa21b4cb6a7db5e6efb5/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313233313335392f3937343135342f66363163353066322d303634622d313165332d393530362d3366343238393066336331392e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/47791095c618944f5838aa21b4cb6a7db5e6efb5/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313233313335392f3937343135342f66363163353066322d303634622d313165332d393530362d3366343238393066336331392e706e67" alt="first-trap-on-github-autocrlf-bash"></a></p><h3 id="TortoiseGit"><a href="#TortoiseGit" class="headerlink" title="TortoiseGit"></a>TortoiseGit</h3><p>很多从 TortoiseSVN 走过来的同学很可能会选用 TortoiseGit 作为主力客户端，那么也需要配置一下。在 Windows 资源管理器窗口中点击右键，选择“TortoiseGit → Settings → Git”，做如下设置。</p><p><a href="https://camo.githubusercontent.com/8d6a7962aba0ce4e94ec32e4bf788360a84b301f/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313233313335392f3937343136322f31363930353264342d303634632d313165332d393434352d3535656637303238623633632e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/8d6a7962aba0ce4e94ec32e4bf788360a84b301f/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313233313335392f3937343136322f31363930353264342d303634632d313165332d393434352d3535656637303238623633632e706e67" alt="first-trap-on-github-autocrlf-tortoisegit"></a></p><p>（由于 TortoiseGit 实际上是基于 Git for Windows 的一个 GUI 外壳，你在上一节所做的设置会影响到上图这些选项的状态，它们可能直接就是你所需要的样子了。）</p><h3 id="GitHub-的-Windows-客户端"><a href="#GitHub-的-Windows-客户端" class="headerlink" title="GitHub 的 Windows 客户端"></a>GitHub 的 Windows 客户端</h3><p>它是今天的第二被告。这货很容易上手，很适合小白，我主要用它来一键克隆项目到本地。可能正是为了维护简洁易用的亲切形象，这货并没有像 TortoiseGit 那样提供丰富的选项（对“换行符自动转换”这样的细节功能完全讳莫如深啊，我这样的小白死了都不知道怎么死的……）。因此，我们需要手动修改一下它的配置。</p><p>GitHub 的 Windows 客户端实际上也是一个壳，它自带了一个便携版的 Git for Windows。这个便携版和你自己安装的 Git for Windows 是相互独立的，不过它们都会使用同一个配置文件（实际上就是当前用户主目录下的 <code>.gitconfig</code> 文件）。</p><p>所以如果你已经配置好了自己安装的 Git for Windows，那就不用操心什么了。但如果你的机器上只装过 GitHub 的 Windows 客户端，那么最简单的配置方法就是手工修改配置文件了。</p><h3 id="修改-Git-的全局配置文件"><a href="#修改-Git-的全局配置文件" class="headerlink" title="修改 Git 的全局配置文件"></a>修改 Git 的全局配置文件</h3><p>进入当前用户的主目录（通常 XP 的用户目录是 <code>C:\Documents and Settings\yourname</code>，在 Vista 和 Win7 下是 <code>C:\Users\yourname</code>），用你最顺手的文本编辑器打开 <code>.gitconfig</code> 文件。</p><p>在 <code>[core]</code> 区段找到 <code>autocrlf</code>，将它的值改为 <code>false</code>。如果没找到，就在 <code>[core]</code> 区段中新增一行：（最终效果见图）</p><pre><code class="source-ini">    autocrlf = false</code></pre><p><a href="https://camo.githubusercontent.com/6ffa4da0e063d96bd53efa07156b4322db46f483/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313233313335392f3937343136332f31666261353632302d303634632d313165332d396438612d6236653665653764333761322e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/6ffa4da0e063d96bd53efa07156b4322db46f483/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313233313335392f3937343136332f31666261353632302d303634632d313165332d396438612d6236653665653764333761322e706e67" alt="first-trap-on-github-autocrlf-gitconfig"></a></p><p>事实上上面介绍的所有命令行或图形界面的配置方法，最终效果都是一样的，因为本质上都是在修改这个配置文件。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a><strong>参考资料:</strong></h2><ul><li><a href="https://toub.es/2012/05/28/fatal-crlf-would-be-replaced-lf" target="_blank" rel="noopener">https://toub.es/2012/05/28/fatal-crlf-would-be-replaced-lf</a></li><li><a href="https://github.com/cssmagic/blog/issues/22" target="_blank" rel="noopener">https://github.com/cssmagic/blog/issues/22</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows环境下php-cgi使用curl请求接口阻塞超时的问题</title>
      <link href="/2019/04/16/windows-php-cgi-timeout/"/>
      <url>/2019/04/16/windows-php-cgi-timeout/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在开发一个新功能，需要在运行的web界面，请求一个远程服务，功能很简单，用curl封转一个远程请求方法调用，对返回结果做简单处理即可；</p><p>功能开发完成，为了测试，临时写了一个demo接口，在页面配置好该接口，结果测试请求时报错，追踪错误日志发现，在请求demo接口时超时未响应。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>首先通过浏览器访问，确认demo接口服务正常；在命令行中使用curl脚本也能获取正常返回结果；</p><p>开发环境使用的是nginx虚拟主机+php-cgi部署，通过本地绑定host的方式访问，初步分析是php进程运行时不能获取系统host设置，于是准备采用在curl请求的header头中添加host的方式绑定域名；（后续回归发现，这个判断是不准确的，域名未绑定返回的错误信息是 Could not resolve host， 而实际返回的错误信息为 Operation timed out）</p><p>在header头添加host设置之后，还是继续提示请求超时的错误，为确认代码无误，将发送远程请求的这段代码截取出来，测试代码如下：</p><pre><code class="php">&lt;?php$header = [  &quot;Host: demo.domain.com&quot;,];$params = [];$ch = curl_init();$defaults[CURLOPT_URL] = &#39;http://127.0.0.1/api/demo&#39;;$defaults[CURLOPT_HEADER] = FALSE;$defaults[CURLOPT_USERAGENT] = &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.98 Safari/537.36&quot;;$defaults[CURLOPT_FOLLOWLOCATION] = TRUE;$defaults[CURLOPT_RETURNTRANSFER] = TRUE;$defaults[CURLOPT_CONNECTTIMEOUT] = 3;$defaults[CURLOPT_TIMEOUT] = 3;curl_setopt($ch, CURLOPT_HTTPHEADER, array(&#39;Expect:&#39;));$options = [CURLOPT_HTTPHEADER=&gt;$header];curl_setopt_array($ch, (array) $options + $defaults);//var_dump($options, $defaults, (array) $options + $defaults);$data = curl_exec($ch);curl_close($ch);echo  $data;</code></pre><p>在本地命令行执行代码，结果正常响应；通过比对各项请求参数配置，完全一致，说明功能代码应该是没有问题的，于是把注意力再放到环境上；</p><p>经过一番搜索之后，大致定位到原因，<strong>Windows下<code>PHP_FCGI_CHILDREN</code>无效</strong>，也就是windows下默认本地只启了一个php-cgi进程，不会产生新进程去处理请求，有并发处理时只能排队，在用户访问一个php页面的时候nginx已将该进程占用，在该进程又发起http请求时，nginx发现这个仅有的进程已被占用而造成阻塞，就这样造成了死锁，一直到超时。</p><h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><h2 id="使用linux环境"><a href="#使用linux环境" class="headerlink" title="使用linux环境"></a>使用linux环境</h2><ul><li>方便快捷，杜绝一切后患，无需做任何修改</li></ul><h2 id="在windows下启动额外的php-cgi处理并发请求"><a href="#在windows下启动额外的php-cgi处理并发请求" class="headerlink" title="在windows下启动额外的php-cgi处理并发请求"></a>在windows下启动额外的php-cgi处理并发请求</h2><ul><li>直接在命令行启动新的php-cgi进程，监听不同端口，如：9001,9002,9003…</li></ul><pre><code class="bash">php-cgi.exe -b 127.0.0.1:9001 -c php.ini</code></pre><p><strong>注意保持命令行不被关闭</strong></p><ul><li><p>或者使用脚本（如 spawn-php.py）启动更多php-cgi进程127.0.0.1:[9001-9010]</p></li><li><p>修改nginx配置，添加代理配置</p></li></ul><pre><code class="bash">upstream phpcgi_proxy {    server 127.0.0.1:9000,    server 127.0.0.1:9001,    server 127.0.0.1:9002,    #more}</code></pre><p>并将配置替换为代理</p><pre><code class="bash">#fastcgi_pass 127.0.0.1:9000;fastcgi_pass phpcgi_proxy</code></pre><p>重新加载nginx配置生效</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在linux下，通过绑定系统host，或是在curl中设置header头host两种方法都能正常响应，完全不需要做这么多额外的处理，也不知道算不算浪费时间，-_-凸</p><p>之前开发环境一直是在linux下，从来没有遇到过类似的问题，最近需要在windows下开发，时不时会遇到一些很诡异的问题。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://stackoverflow.com/questions/13813667/php-curl-timing-out-but-cli-curl-works?rq=1" target="_blank" rel="noopener">https://stackoverflow.com/questions/13813667/php-curl-timing-out-but-cli-curl-works?rq=1</a></p><p><a href="https://www.cnblogs.com/gudaojuanma/p/php-curl-nginx-timeout-cli-work.html" target="_blank" rel="noopener">https://www.cnblogs.com/gudaojuanma/p/php-curl-nginx-timeout-cli-work.html</a></p><p><a href="https://www.mokeyjay.com/archives/1103" target="_blank" rel="noopener">https://www.mokeyjay.com/archives/1103</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协作开发的项目配置文件管理</title>
      <link href="/2019/04/15/project-config-manage/"/>
      <url>/2019/04/15/project-config-manage/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我们在日常开发中经常遇到这样一些比较典型的情况：一个开发团队有多个成员，每个人各自使用不同的开发环境，linux、windows或者Mac OS，每个人使用的IDE也不尽相同。<br>对于程序本身，并没有什么问题，php可以在各个平台正常运行，但是每个人可能会有各自的开发环境，团队应该提供单独的测试环境，线上服务也可能需要提供灰度和正式环境，不同的环境对应的配置文件中服务配置、数据库配置、路径配置多少都会有不一致的设置。<br>以thinkphp为例，项目基本配置都在config.php和database.php中，为保证服务能正常启动运行，配置文件必不可缺，都应该提交到代码仓库中去（<strong>注意：如果代码库是公开的github，则用户名密码等敏感信息一定不能提交发布</strong>，本文所讨论情况，局限于私有代码库）<br>这在代码的版本控制上，可能出现以下几种麻烦：</p><ul><li>成员在本地开发的时候，都需要将配置修改为各自不同的设置，提交代码和拉去代码时，可能产生冲突，虽然不难解决，但每次解决类似问题比较影响效率</li><li>也有成员处于安全考虑，不将本地敏感配置提交到代码库，但每次拉取代码后，本地设置都需要重新修改一遍</li><li>不同测试和生产环境使用的配置不同，每次发布上线代码时都需要认真比对修改配置，无法完全自动化处理</li><li>可以简单粗暴的将配置文件排除在代码库之外，这能解决上面一部分问题，但是显然代码库是不完整的，新成员直接拉取代码是无法运行的，更致命的是，当项目需要新增或修改一个公共配置的时候，不得不通知所有成员手动更新配置文件</li><li>……</li></ul><h1 id="方案对比"><a href="#方案对比" class="headerlink" title="方案对比"></a>方案对比</h1><h2 id="基于Base类的配置文件"><a href="#基于Base类的配置文件" class="headerlink" title="基于Base类的配置文件"></a>基于Base类的配置文件</h2><p>曾经在一些历史项目中采用这个方案，框架为基础极简架构，只提供基础mvc；在项目中使用一个Config类作为主配置文件，Config类继承自ConfigBase类，配置项都声明为类中的常量，在使用配置项的地方直接读取子类的常量参数；<br>所有配置项都会在基类进行定义，环境有别于基类的配置则在子类中重新声明，覆盖基类定义，这样每个人都可以有自己的环境配置，且添加公共配置的时候，直接添加到ConfigBase就可以；<br>项目初始化的时候，所有配置都写在基类中，Config类默认为空，后续开发过程中，可以将本地配置设置到Config类中，并将Config.php文件添加到代码库ignore配置中，这样就可以满足协同开发配置问题；<br>如果希望将自己的配置文件也添加到代码库中进行变更管理，可以复制Config.php生成带个人后缀的配置文件Config.php.dev，将个人文件提交到代码库，之后重新生成链接文件Config.php指向到个人配置文件，即可满足要求；</p><pre><code class="php">Config.php&lt;?phpclass Config extends ConfigBase{    const LOG_PATH = &#39;/home/user/log/project/&#39;;    ...}ConfigBase.php&lt;?phpclass ConfigBase{    const LOG_PATH = &#39;/var/log/project/&#39;;    ...}Demo.php&lt;?phpclass Demo{    public function test()    {        $logPath = Config::LOG_PATH;    }}</code></pre><h2 id="辅助脚本生成-更新配置文件"><a href="#辅助脚本生成-更新配置文件" class="headerlink" title="辅助脚本生成/更新配置文件"></a>辅助脚本生成/更新配置文件</h2><p>对于一些目前比较流行的开源框架（以thinkphp为例），基本都是采用在指定路径的config.php文件中返回php数组的方式定义系统配置，（也支持.ini，.xml，.json等格式的配置文件，单最终也都由框架解析为php数组。）显然，前面所提到的方式不适用，但在这个方案的基础上我们可以做一点变化满足要求。<br>框架默认读取的配置文件是config.php和database.php，还是以config配置为例，考虑添加config.base.php作为基础配置文件，包括全部配置项，再增加一个config.dev.php作为个人配置文件，默认返回空数组，有个人配置项时，个人配置覆盖基础配置；项目实际还是从config.php读取配置，初始化默认为空；<br>编写一个脚手架脚本，提供初始化和更新功能，初始化时，根据config.base.php和config.dev.php配置生成一个合并的配置文件config.php供项目读取；执行更新任务时，比对config.php文件、基础配置和个人配置，如果基础配置有新增，则将新加配置项添加到config.php中，如果有配置修改，依照个人配置覆盖基础配置的原则将配置项更新到config.php文件中；<br>同样，将config.php文件加到代码库ignore配置中，添加个人后缀的本地配置文件，并可提交到代码库管理，执行脚本时，指定自己使用的本地配置文件，同样可以满足协同开发的配置管理基本要求。</p><h2 id="基于环境变量的配置管理"><a href="#基于环境变量的配置管理" class="headerlink" title="基于环境变量的配置管理"></a>基于环境变量的配置管理</h2><p>php本身可以通过getenv获取环境变量，现在主流的框架对环境变量也有很好的支持，所以考虑通过设置环境变量的方式来指定加载不同的配置文件，这样就可以满足针对不同环境使用不同配置的管理和切换问题；</p><h3 id="常见设置环境变量方法："><a href="#常见设置环境变量方法：" class="headerlink" title="常见设置环境变量方法："></a>常见设置环境变量方法：</h3><pre><code>#ApacheSetEnv APPLICATION_ENV develop#nginxfastcgi_param APPLICATION_ENV develop;#php cli$ export APPLICATION_ENV=develop</code></pre><p>那么框架就会自动加载对应的配置文件（默认位于 <code>application/develop.php</code>），根据配置加载优先级，该配置会覆盖默认的应用配置，应用配置文件是应用初始化的时候首先加载的公共配置文件，默认位于<code>application/config.php</code>。这样添加和修改公共配置的问题也解决了。<br>现在，我们再来处理一个细节问题，将环境变量的值设置到框架配置，把前面的操作结合到一起就可以完成，处理如下<br>1 在web服务环境中<a href="#常见设置环境变量方法：">设置环境变量</a><br>2 在项目入口处读取所设置的环境变量，并定义为常量</p><pre><code class="php">&lt;?php...$env = isset($_SERVER[&#39;APPLICATION_ENV&#39;]) ? $_SERVER[&#39;APPLICATION_ENV&#39;] : &#39;development&#39;;define(&#39;APP_STATUS&#39;, $env);...</code></pre><p>3 把所定义的常量设置到配置文件config.php中</p><pre><code class="php">&#39;app_status&#39; =&gt; APP_STATUS</code></pre><p>通过以上几步，基本完成了通过设置环境变量指定配置文件的功能。</p><h2 id="使用-env-设置环境变量"><a href="#使用-env-设置环境变量" class="headerlink" title="使用 .env 设置环境变量"></a>使用 .env 设置环境变量</h2><p>前面的配置虽然实现了功能，但需要修改web服务器的配置添加额外配置，任何非标准配置都不利于系统的自动化运维，可能在部署过程中遗留导致服务部署异常，所以不一定是最好的方案；另外需要单独修改框架中非业务逻辑，好像也不是特别好；<br>在分析thinkphp配置文件的过程中，注意到很多配置项使用的是Env::get()方式设置的，其实就是thinkphp5.0支持的环境变量配置，在开发过程中，可以在应用根目录下面的<code>.env</code>来模拟环境变量配置，<code>.env</code>文件中的配置参数定义格式采用<code>ini</code>方式，所有我们可以在这里设置app_status配置</p><pre><code>[app]status = develop</code></pre><p>并修改config.php配置文件</p><pre><code>&#39;app_status&#39; =&gt; Env::get(&#39;app.status&#39;),</code></pre><p>同样满足了之前的一系列要求，只需要保证不把<code>.env</code>文件添加到代码库即可</p><p>注意：如果部署环境单独配置了环境变量，需要删除<code>.env</code>配置文件，避免冲突。</p><h2 id="副产品"><a href="#副产品" class="headerlink" title="副产品"></a>副产品</h2><p>使用<code>.env</code>设置环境变量还能解决敏感信息配置安全性的问题，如，数据库配置文件中，用户名密码字段的值可以直接留空，从环境变量文件中设置即可</p><pre><code>.env[database]username =  rootpassword =  123456database.php// 用户名 &#39;username&#39; =&gt; Env::get(&#39;database.username&#39;, &#39;&#39;), // 密码 &#39;password&#39; =&gt; Env::get(&#39;database.password&#39;, &#39;&#39;),</code></pre><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>除了上面列举的几种方法，还有很多不同的处理，没有哪种实现是完美的，个人觉得选择方案主要还是要从支持协作开发，便于开发维护，支持持续集成，兼顾安全等各方面权衡。并且不同团队的开发使用习惯也不尽相同，还是应该选择最适合团队项目的实现方式。</p><p>#参考<br><a href="http://www.digpage.com/environment.html" target="_blank" rel="noopener">环境和配置文件</a><br><a href="https://www.kancloud.cn/manual/thinkphp5/118024" target="_blank" rel="noopener">thinkphp5.0完全开发手册-配置</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo+github搭建博客（基础）</title>
      <link href="/2019/04/13/first-Hexo/"/>
      <url>/2019/04/13/first-Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ul><li>安装Node.js，配置node环境</li><li>安装和配置git</li><li>注册github账号，新建项目，项目名设定为：{username}.github.io，并且勾选Initialize this repository with a README</li></ul><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>新建文件夹</p><pre><code class="bash">mkdir blogcd blog</code></pre><p>安装Hexo</p><pre><code class="bash">npm install hexo -g</code></pre><p>检查安装结果</p><pre><code class="bash">hexo -v</code></pre><p>初始化</p><pre><code class="bash">hexo init</code></pre><p>安装所有依赖组件</p><pre><code class="bash">npm install</code></pre><p>生成blog网站代码</p><pre><code class="bash">hexo g</code></pre><p>启动本地服务</p><pre><code class="bash">hexo s</code></pre><p>如果启动成功，可访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 进行预览<br>如果页面无法访问，可能是本地端口被占用，可使用以下命令更改端口启动服务</p><pre><code class="bash">hexo server -p port</code></pre><p>当出现如下界面表示服务启动成功<br><img src="https://images2017.cnblogs.com/blog/1108615/201710/1108615-20171021232413224-1288183746.png" alt></p><h1 id="将hexo与github-page关联起来"><a href="#将hexo与github-page关联起来" class="headerlink" title="将hexo与github page关联起来"></a>将hexo与github page关联起来</h1><p>设置git的user和email</p><pre><code class="bash">git config --global user.name &quot;you name&quot;git config --global user.email &quot;you email&quot;</code></pre><p>设置git免密信任授权，将本地<code>~/.ssh/id_rsa.pub</code> 文件的内容添加到github settings-&gt;SSH keys<br>测试ssh信任是否成功</p><pre><code class="bash">ssh -T git@github.com</code></pre><p>配置Deployment，在文件夹中找到<code>_config.yml</code>配置文件，修改repo的值</p><pre><code class="yml">deploy:  type: git  repository: git@github.com:username/username.github.io.git  branch: master</code></pre><p>新建一篇博客</p><pre><code class="bash">hexo new post &quot;new.post.for.hexo&quot;</code></pre><p>这时候在_posts目录下会看到新创建的文件（new-post-for-hexo.md）<br>安装一个扩展，用于把新的文件部署到github</p><pre><code class="bash">npm install hexo-deployer-git --save</code></pre><p>使用编辑器编写文章并保存<br>执行命令生成并发布文章</p><pre><code class="bash">hexo d -g</code></pre><p>部署成功后，就可以访问github的地址，<a href="http://username.github.io" target="_blank" rel="noopener">http://username.github.io</a> ，即可看到新生成的文章</p><ul><li style="list-style: none"><input type="checkbox"> 至此，博客的基本搭建就完成了。想·</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/04/13/hello-world/"/>
      <url>/2019/04/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
