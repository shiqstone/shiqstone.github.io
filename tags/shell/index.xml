<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>shell on 他山笨石</title>
    <link>https://shiqstone.github.io/tags/shell/</link>
    <description>Recent content in shell on 他山笨石</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Tue, 21 Feb 2023 16:18:36 +0800</lastBuildDate><atom:link href="https://shiqstone.github.io/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>编写Shell脚本的一些知识点</title>
      <link>https://shiqstone.github.io/post/how-to-write-shell-script/</link>
      <pubDate>Tue, 21 Feb 2023 16:18:36 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/how-to-write-shell-script/</guid>
      <description>最近经常需要上服务器修改一个配置文件端口，操作倒是不多，但是每次都要重复命令略麻烦，所以准备写一个脚本来简化操作。因为有段时间没有写shell脚本，有点手生，简单点东西连查资料带写也花了半天多。作为总结，把过程中遇到的一些点复盘一下，算不上系统的知识整理。
需求描述 具体场景是一个远程服务器上的服务端口会不定期失效，目前修复服务的方法就是
远程登录到服务器上 修改配置文件中的端口号 重启服务 开放防火墙端口 在本地验证远程服务端口状态 现有操作主要用到下面的命令：
ssh $user@$host vim /usr/local/etc/xray/config.json systemctl restart xray firewall-cmd --zone=public --add-port=10086/tcp 部署这个服务所需的准备工作，如需要购买vps，安装linux系统，安装xray，配置服务器的免密登录等，此处不做详细说明。
接受参数 脚本主要功能是登录到远程服务器上修改端口配置，如果服务器IP，登录用户名，端口都是固定的，可以直接在代码中写死，但考虑脚本的可复用性，会声明几个变量，并设定默认值。
常用的几种获取参数的方式有以下几种：
直接获取，使用$1,$2,$3…进行解析 使用getopt函数: 单个字符选项的情况，例如：-n 10 -f file.txt等选项 使用getopts函数：可同时接受短命令和长命令，如：–prefix=/home等 直接获取 shell脚本自动将命令行参数赋给各个位置参数，输入参数以空格分隔（如果想在参数中使用空格，需要用引号引起来）；在程序中使用${n}，$0为程序名，$1为第一个参数，$2 ... $9为第二到第九个参数，参数超过9个之后，需要用大括号的方式获取${12}
```bash # bash test.sh a b c echo $0 # test.sh echo $1 # a echo $2 # b echo $3 # c ``` 这种方式优点在于简单直接，不需要做特殊处理就可以直接获取并使用参数，但缺点是不灵活，所有参数需要严格按顺序输入，且不能缺省，如果添加、删除以及调整参数顺序时，都需要小心修改程序；同时，参数比较多时，使用脚本不方便记忆。
使用getopts函数 getopts是shell中内建的命令，它的使用语法相对getopt简单，但它不支持长命令参数（--option）。它不会重排列所有参数的顺序，选项参数的格式必须是-d val，而不能是中间没有空格的-dval，遇到非-开头的参数，或者选项参数结束标记&amp;ndash;就中止了，如果中间遇到非选项的命令行参数，后面的选项参数就都取不到了，出现的目的仅仅是为了代替getopt较快捷方便的执行参数的分析。
命令格式为getopts optstring name [arg]
#!/bin/sh while getopts &amp;#34;:b:o:h&amp;#34; opt_name do case $opt_name in b) echo &amp;#34;-b Option is recognized, argument=$OPTARG&amp;#34; ;; o) echo &amp;#34;-o Option is recognized, argument=$OPTARG&amp;#34; ;; h) echo &amp;#34;-h Option is recognized&amp;#34; ;; :) echo &amp;#34;$OPTARG Option need a argument&amp;#34; ;; esac done optstring：表示要识别的命令行选项形式，如果一个字母后面有一个&amp;quot;:&amp;quot;，表示该命令行选项后面要跟一个参数。如optsting写成&amp;quot;co:f:&amp;quot;，表示支持-c、-o、-f选项识别，-o和-f选项后面需要跟一个参数</description>
    </item>
    
    <item>
      <title>命令行的艺术</title>
      <link>https://shiqstone.github.io/post/the-art-of-command-line/</link>
      <pubDate>Wed, 08 Feb 2023 15:08:29 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/the-art-of-command-line/</guid>
      <description>命令行的艺术 转自：GitHub github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md
这篇文章是许多作者和译者共同的成果。 这里的部分内容 首次 出现 于 Quora， 但已经迁移到了 Github，并由众多高手做出了许多改进。 如果你在本文中发现了错误或者存在可以改善的地方，请贡献你的一份力量。
前言 涵盖范围：
这篇文章不仅能帮助刚接触命令行的新手，而且对具有经验的人也大有裨益。本文致力于做到覆盖面广（涉及所有重要的内容），具体（给出具体的最常用的例子），以及简洁（避免冗余的内容，或是可以在其他地方轻松查到的细枝末节）。在特定应用场景下，本文的内容属于基本功或者能帮助您节约大量的时间。 本文主要为 Linux 所写，但在仅限 OS X 系统章节和仅限 Windows 系统章节中也包含有对应操作系统的内容。除去这两个章节外，其它的内容大部分均可在其他类 Unix 系统或 OS X，甚至 Cygwin 中得到应用。 本文主要关注于交互式 Bash，但也有很多技巧可以应用于其他 shell 和 Bash 脚本当中。 除去“标准的”Unix 命令，本文还包括了一些依赖于特定软件包的命令（前提是它们具有足够的价值）。 注意事项：
为了能在一页内展示尽量多的东西，一些具体的信息可以在引用的页面中找到。我们相信机智的你知道如何使用 Google 或者其他搜索引擎来查阅到更多的详细信息。文中部分命令需要您使用 apt-get，yum，dnf，pacman， pip 或 brew（以及其它合适的包管理器）来安装依赖的程序。 遇到问题的话，请尝试使用 Explainshell 去获取相关命令、参数、管道等内容的解释。 基础 学习 Bash 的基础知识。具体地，在命令行中输入 man bash 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你只学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。
熟悉至少一个基于文本的编辑器。通常而言 Vim （vi） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。</description>
    </item>
    
  </channel>
</rss>
