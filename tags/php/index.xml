<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>php on 他山笨石</title>
    <link>https://shiqstone.github.io/tags/php/</link>
    <description>Recent content in php on 他山笨石</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Tue, 16 Apr 2019 23:59:07 +0000</lastBuildDate><atom:link href="https://shiqstone.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>windows环境下php-cgi使用curl请求接口阻塞超时的问题</title>
      <link>https://shiqstone.github.io/post/windows-php-cgi-timeout/</link>
      <pubDate>Tue, 16 Apr 2019 23:59:07 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/windows-php-cgi-timeout/</guid>
      <description>问题 在开发一个新功能，需要在运行的web界面，请求一个远程服务，功能很简单，用curl封转一个远程请求方法调用，对返回结果做简单处理即可；
功能开发完成，为了测试，临时写了一个demo接口，在页面配置好该接口，结果测试请求时报错，追踪错误日志发现，在请求demo接口时超时未响应。
分析 首先通过浏览器访问，确认demo接口服务正常；在命令行中使用curl脚本也能获取正常返回结果；
开发环境使用的是nginx虚拟主机+php-cgi部署，通过本地绑定host的方式访问，初步分析是php进程运行时不能获取系统host设置，于是准备采用在curl请求的header头中添加host的方式绑定域名；（后续回归发现，这个判断是不准确的，域名未绑定返回的错误信息是 Could not resolve host， 而实际返回的错误信息为 Operation timed out）
在header头添加host设置之后，还是继续提示请求超时的错误，为确认代码无误，将发送远程请求的这段代码截取出来，测试代码如下：
&amp;lt;?php $header = [ &amp;#34;Host: demo.domain.com&amp;#34;, ]; $params = []; $ch = curl_init(); $defaults[CURLOPT_URL] = &amp;#39;http://127.0.0.1/api/demo&amp;#39;; $defaults[CURLOPT_HEADER] = FALSE; $defaults[CURLOPT_USERAGENT] = &amp;#34;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.98 Safari/537.36&amp;#34;; $defaults[CURLOPT_FOLLOWLOCATION] = TRUE; $defaults[CURLOPT_RETURNTRANSFER] = TRUE; $defaults[CURLOPT_CONNECTTIMEOUT] = 3; $defaults[CURLOPT_TIMEOUT] = 3; curl_setopt($ch, CURLOPT_HTTPHEADER, array(&amp;#39;Expect:&amp;#39;)); $options = [CURLOPT_HTTPHEADER=&amp;gt;$header]; curl_setopt_array($ch, (array) $options + $defaults); //var_dump($options, $defaults, (array) $options + $defaults); $data = curl_exec($ch); curl_close($ch); echo $data; 在本地命令行执行代码，结果正常响应；通过比对各项请求参数配置，完全一致，说明功能代码应该是没有问题的，于是把注意力再放到环境上；</description>
    </item>
    
    <item>
      <title>协作开发的项目配置文件管理</title>
      <link>https://shiqstone.github.io/post/project-config-manage/</link>
      <pubDate>Mon, 15 Apr 2019 22:38:06 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/project-config-manage/</guid>
      <description>背景 我们在日常开发中经常遇到这样一些比较典型的情况：一个开发团队有多个成员，每个人各自使用不同的开发环境，linux、windows或者Mac OS，每个人使用的IDE也不尽相同。 对于程序本身，并没有什么问题，php可以在各个平台正常运行，但是每个人可能会有各自的开发环境，团队应该提供单独的测试环境，线上服务也可能需要提供灰度和正式环境，不同的环境对应的配置文件中服务配置、数据库配置、路径配置多少都会有不一致的设置。 以thinkphp为例，项目基本配置都在config.php和database.php中，为保证服务能正常启动运行，配置文件必不可缺，都应该提交到代码仓库中去（注意：如果代码库是公开的github，则用户名密码等敏感信息一定不能提交发布，本文所讨论情况，局限于私有代码库） 这在代码的版本控制上，可能出现以下几种麻烦：
成员在本地开发的时候，都需要将配置修改为各自不同的设置，提交代码和拉去代码时，可能产生冲突，虽然不难解决，但每次解决类似问题比较影响效率 也有成员处于安全考虑，不将本地敏感配置提交到代码库，但每次拉取代码后，本地设置都需要重新修改一遍 不同测试和生产环境使用的配置不同，每次发布上线代码时都需要认真比对修改配置，无法完全自动化处理 可以简单粗暴的将配置文件排除在代码库之外，这能解决上面一部分问题，但是显然代码库是不完整的，新成员直接拉取代码是无法运行的，更致命的是，当项目需要新增或修改一个公共配置的时候，不得不通知所有成员手动更新配置文件 …… 方案对比 基于Base类的配置文件 曾经在一些历史项目中采用这个方案，框架为基础极简架构，只提供基础mvc；在项目中使用一个Config类作为主配置文件，Config类继承自ConfigBase类，配置项都声明为类中的常量，在使用配置项的地方直接读取子类的常量参数； 所有配置项都会在基类进行定义，环境有别于基类的配置则在子类中重新声明，覆盖基类定义，这样每个人都可以有自己的环境配置，且添加公共配置的时候，直接添加到ConfigBase就可以； 项目初始化的时候，所有配置都写在基类中，Config类默认为空，后续开发过程中，可以将本地配置设置到Config类中，并将Config.php文件添加到代码库ignore配置中，这样就可以满足协同开发配置问题； 如果希望将自己的配置文件也添加到代码库中进行变更管理，可以复制Config.php生成带个人后缀的配置文件Config.php.dev，将个人文件提交到代码库，之后重新生成链接文件Config.php指向到个人配置文件，即可满足要求；
Config.php &amp;lt;?php class Config extends ConfigBase { const LOG_PATH = &amp;#39;/home/user/log/project/&amp;#39;; ... } ConfigBase.php &amp;lt;?php class ConfigBase { const LOG_PATH = &amp;#39;/var/log/project/&amp;#39;; ... } Demo.php &amp;lt;?php class Demo { public function test() { $logPath = Config::LOG_PATH; } } 辅助脚本生成/更新配置文件 对于一些目前比较流行的开源框架（以thinkphp为例），基本都是采用在指定路径的config.php文件中返回php数组的方式定义系统配置，（也支持.ini，.xml，.json等格式的配置文件，单最终也都由框架解析为php数组。）显然，前面所提到的方式不适用，但在这个方案的基础上我们可以做一点变化满足要求。 框架默认读取的配置文件是config.php和database.php，还是以config配置为例，考虑添加config.base.php作为基础配置文件，包括全部配置项，再增加一个config.dev.php作为个人配置文件，默认返回空数组，有个人配置项时，个人配置覆盖基础配置；项目实际还是从config.php读取配置，初始化默认为空； 编写一个脚手架脚本，提供初始化和更新功能，初始化时，根据config.base.php和config.dev.php配置生成一个合并的配置文件config.php供项目读取；执行更新任务时，比对config.php文件、基础配置和个人配置，如果基础配置有新增，则将新加配置项添加到config.php中，如果有配置修改，依照个人配置覆盖基础配置的原则将配置项更新到config.php文件中； 同样，将config.php文件加到代码库ignore配置中，添加个人后缀的本地配置文件，并可提交到代码库管理，执行脚本时，指定自己使用的本地配置文件，同样可以满足协同开发的配置管理基本要求。
基于环境变量的配置管理 php本身可以通过getenv获取环境变量，现在主流的框架对环境变量也有很好的支持，所以考虑通过设置环境变量的方式来指定加载不同的配置文件，这样就可以满足针对不同环境使用不同配置的管理和切换问题；
常见设置环境变量方法： #Apache SetEnv APPLICATION_ENV develop #nginx fastcgi_param APPLICATION_ENV develop; #php cli $ export APPLICATION_ENV=develop 那么框架就会自动加载对应的配置文件（默认位于 application/develop.</description>
    </item>
    
  </channel>
</rss>
