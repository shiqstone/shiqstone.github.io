<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>git on 他山笨石</title>
    <link>https://shiqstone.github.io/tags/git/</link>
    <description>Recent content in git on 他山笨石</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Fri, 02 Sep 2022 21:52:22 +0800</lastBuildDate><atom:link href="https://shiqstone.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>根据项目设置不同git配置及修改已提交的信息</title>
      <link>https://shiqstone.github.io/post/git_config_by_project/</link>
      <pubDate>Fri, 02 Sep 2022 21:52:22 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/git_config_by_project/</guid>
      <description>0. 前言 通常都会遇到同时有公司项目和个人项目并存的情况，而且一般两种项目的git配置是不一致的。已经不止一次遇到用公司git用户名向个人项目推送代码的问题，个人感觉这样很不专业，所以整理了相关处理操作。
1. 全局配置用户信息 查看配置信息
git config --list user.email=xxx@abc.com user.name=xxx 修改全局配置信息
# 设置用户名 git config --global user.name xxx # 设置作者邮箱 git config --global user.email xxx@abc.com 全局命令实际上是修改了~/.gitconfig这个文件，编辑这个文件可以看到完整配置。
2. 为不同项目设置不同配置 个人项目提交到github上时，不希望暴露出相关公司信息，就要单独设置每个项目的git配置。
每个git项目下都有一个.git的隐藏文件夹，该目录下有一个config文件，编辑文件内容，增加如下片段：
[user] name = xxx email = xxx@abc.com 也可以使用命令行方式实现相同目的，在项目根目录下执行以下命令即可
git config user.name xxx git config user.email xxx@abc.com 说明：在项目配置和全局配置同时存在的情况下，项目配置会覆盖全局配置。
3. 修改已push的commit信息 操作步骤如下：
先git log查看提交 hash，就是 commit-id
git log 提交记录会按时间倒序展示
rebase到要修改位置的上一个
# git rebase -i -p &amp;lt;previous-commit-id&amp;gt; git rebase -i -p 55d4ce7e35ff9a0c5590bc3589160cfd304d3ae5 会看到类似如下的提示</description>
    </item>
    
    <item>
      <title>Git 多平台换行符问题(LF or CRLF)</title>
      <link>https://shiqstone.github.io/post/git-lf-crlf/</link>
      <pubDate>Wed, 24 Apr 2019 00:06:23 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/git-lf-crlf/</guid>
      <description>$ git add . fatal: CRLF would be replaced by LF ... 文本文件所使用的换行符，在不同的系统平台上是不一样的。UNIX/Linux 使用的是 0x0A（LF），早期的 Mac OS 使用的是 0x0D（CR），后来的 OS X 在更换内核后与 UNIX 保持一致了。但 DOS/Windows 一直使用 0x0D0A（CRLF） 作为换行符。
跨平台协作开发是常有的，不统一的换行符确实对跨平台的文件交换带来了麻烦。最大的问题是，在不同平台上，换行符发生改变时，Git 会认为整个文件被修改，这就造成我们没法 diff，不能正确反映本次的修改。还好 Git 在设计时就考虑了这一点，其提供了一个 autocrlf 的配置项，用于在提交和检出时自动转换换行符，该配置有三个可选项：
true: 提交时转换为 LF，检出时转换为 CRLF false: 提交检出均不转换 input: 提交时转换为LF，检出时不转换 用如下命令即可完成配置：
# 提交时转换为LF，检出时转换为CRLF git config --global core.autocrlf true # 提交时转换为LF，检出时不转换 git config --global core.autocrlf input # 提交检出均不转换 git config --global core.autocrlf false 如果把 autocrlf 设置为 false 时，那另一个配置项 safecrlf 最好设置为 ture。该选项用于检查文件是否包含混合换行符，其有三个可选项：</description>
    </item>
    
  </channel>
</rss>
