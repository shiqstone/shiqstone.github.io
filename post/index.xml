<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 他山笨石</title>
    <link>https://shiqstone.github.io/post/</link>
    <description>Recent content in Posts on 他山笨石</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Tue, 07 May 2024 15:03:30 +0800</lastBuildDate><atom:link href="https://shiqstone.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DevEco 启动了模拟器但是显示 No Device</title>
      <link>https://shiqstone.github.io/post/deveco_emulator_nodevice/</link>
      <pubDate>Tue, 07 May 2024 15:03:30 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/deveco_emulator_nodevice/</guid>
      <description>已经安装了模拟器，并且模拟器已经运行了 在Device Manager页面启动了模拟器 但是在设备选择下拉列表没有模拟器的选项，显示“No Device” 同时，打开项目时，Notifications 中提示如下信息
unable to open connection to hdc server on localhost/127.0.0.1:5037, due to: java.net.connectexception: connection refused 尝试设置HDC_SERVER_PORT，修改默认端口等方法都没有生效
最后发现，模拟器的USB调试会自动关闭，导致设备列表中找不到已经启动的模拟器设备 设置启用后，就可以在设备列表里面选择使用了 没想到被同一块小石头绊倒了一次又一次</description>
    </item>
    
    <item>
      <title>使用systemctl命令配置开机启动服务</title>
      <link>https://shiqstone.github.io/post/systemctl_set_startup_service/</link>
      <pubDate>Thu, 21 Mar 2024 17:40:49 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/systemctl_set_startup_service/</guid>
      <description>systemctl是Linux系统上用于管理系统服务（systemd单元）的命令行工具。它可以用来启动、停止、重启、禁用、启用、查询和管理系统服务的状态。
我们可以通过自定义服务的方式，把指定的脚本程序配置为系统服务，可以用systemctl命令控制状态，并可设置为开机自动启动。
实现步骤 创建.service文件 例如，为一个qnc_api程序配置启动服务，可以创建一个qnc_api.service
[Unit] Description=Qnc Api Service After=network.target [Service] User=ec2-user Type=simple WorkingDirectory=/home/ec2-user ExecStart=/home/ec2-user/qnc_api &amp;gt; /home/ec2-user/log.txt 2&amp;gt;&amp;amp;1 Restart=always RestartSec=10 [Install] WantedBy=multi-user.target 主要字段说明： [Unit] Description：一段描述这个Unit文件的文字，通常只是简短的一句话。 Requires：依赖的其他Unit列表，列在其中的Unit 模块会在这个服务启动的同时被启动，并且如果其中有任意一个服务启动失败，这个服务也会被终止。 Wants：与Requires相似，但只是在被配置的这个 Unit 启动时，触发启动列出的每个 Unit 模块，而不去考虑这些模块启动是否成功。 After：与Requires 相似，但会在后面列出的所有模块全部启动完成以后，才会启动当前的服务。 Before：与After 相反，在启动指定的任一个模块之前，都会首先确保当前服务已经运行。 Conflicts：与这个模块有冲突的模块，如果列出模块中有已经在运行的，这个服务就不能启动，反之亦然。 上面这些配置中，除了Description 外，都能够被添加多次。比如前面第一个例子中的After参数在一行中使用空格分隔指定所有值，也可以像第二个例子中那样使用多个After参数，在每行参数中指定一个值。
[Service] Type：服务的类型，常用的有 simple（默认类型） 和 forking。++默认的 simple 类型可以适应于绝大多数的场景，因此一般可以忽略这个参数的配置++。而如果服务程序启动后会通过 fork 系统调用创建子进程，然后关闭应用程序本身进程的情况，则应该将 Type 的值设置为 forking，否则 systemd 将不会跟踪子进程的行为，而认为服务已经退出。 ExecStart：这个参数是几乎每个 .service 文件都会有的，指定服务启动的主要命令，在每个配置文件中只能使用一次。 ExecStartPre：指定在启动执行 ExecStart 的命令前的准备工作，可以有多个，如前面第二个例子中所示，所有命令会按照文件中书写的顺序依次被执行。 ExecStop：停止服务所需要执行的主要命令。 WorkingDirectory：指定服务的工作目录。 RootDirectory：指定服务进程的根目录（ / 目录），如果配置了这个参数后，服务将无法访问指定目录以外的任何文件。 User：指定运行服务的用户，会影响服务对本地文件系统的访问权限。 [Install] WantedBy：表示该服务所在的 Target(服务组) 文件位置 配置文件主要放在 /usr/lib/systemd/ 目录(CentOS)，也可能在 /etc/systemd/ 目录(Ubuntu), 有系统(system)和用户(user)之分，需要开机不登陆就能运行的程序，存在系统服务里，以Ubuntu为例，我们把上面编辑的qnc_api.</description>
    </item>
    
    <item>
      <title>在AWS EC2上安装使用redis</title>
      <link>https://shiqstone.github.io/post/install-redis-server-on-aws-ec2/</link>
      <pubDate>Sun, 10 Mar 2024 03:22:01 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/install-redis-server-on-aws-ec2/</guid>
      <description>Amazon 的 ElastiCache 有着出色的性能表现和可靠的稳定性，但价格不菲，对于一些小负载，且对数据可靠性要求不太高的场景，可以采用在ec2上自行搭建redis服务的方式；在这里，系统版本采用Amazon Linux3。
sudo yum-config-manager --enable epel sudo yum install redis6 -y #sudo redis6-server /etc/redis6/redis6.conf sudo systemctl enable redis6 sudo systemctl start redis6 sudo systemctl status redis6 几个简单命令就可以完成安装，可以用以下命令进行简单测试
redis6-cli -h 127.0.0.1 -p 6379 127.0.0.1:6379&amp;gt; set a &amp;#34;hello&amp;#34; OK 127.0.0.1:6379&amp;gt; get a &amp;#34;hello&amp;#34; 意外的是在这个环境下，甚至还有代码补全，虽然日常用不到。</description>
    </item>
    
    <item>
      <title>Stable Diffusion WebUI本地安装部署（Mac M1）</title>
      <link>https://shiqstone.github.io/post/local_deployment_sd/</link>
      <pubDate>Wed, 28 Feb 2024 22:20:56 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/local_deployment_sd/</guid>
      <description>在AIGC刚开始流行时，曾简单尝试过一些早期的技术方案，当时主要采用的是Colab的免费服务，之后DALL-E和Midjourney的横空出世，也很是惊艳，跟风玩了一段时间，直到各家开始收费之后，因为没有实际商用的原因，没有继续跟进； 最近开始有一些绘图和改图的需求，经过调研注意到Stable Diffusion是一个强大的AI绘画工具，出图质量完全满足要求，更重要的是它是一个开源的工具，完全可以自己部署和维护，并且有活跃的开源社区提供了众多非常优秀的模型。
出于学习和尝试开发的目的，决定在自己的MacBook Pro（M1）笔记本上安装使用Stable Diffusion，以下是大概步骤的记录。
需要注意的是，由于硬件和操作系统的不同，网上一些常见的linux/windows教程并不适用。
前置条件与硬件要求 CPU：M1及以上芯片 内存RAM：8GB及以上 硬盘ROM：剩余空间30GB及以上 * 在持续运行中，切换模型和生成图片的过程会不断占用硬盘空间，在运行中不会自行清除，重启服务和重启系统后可以释放空间
Stable Diffusion web UI介绍 Stable Diffusion web UI是一个基于Stable Diffusion的开源项目。这个项目非常强大，把原本很难安装配置的开源项目做成了一个简单易操作的网页，后来又引入了插件系统，可以玩出很多花样。非常适合新人上手。
大致步骤 安装 Home Brew 安装 Python和其它相关拓展 安装 Stable Diffusion WebUI 启动 Stable Diffusion 安装 Home Brew 详见 Homebrew
安装Python 有两种方式来安装Python，你可以根据自己的需求选择其中一种：
A 使用命令行直接安装 执行以下命令来一次性安装所有必要的依赖：
brew install cmake protobuf rust python@3.10 git wget B 推荐 使用Anaconda来创建虚拟环境 首先，安装Anaconda并将其加入环境变量中：
brew install --cask anaconda echo ‘export PATH=”/usr/local/anaconda3/bin:$PATH” ‘ &amp;gt;&amp;gt; ~/.zshrc source ~/.zshrc conda init zsh 接下来，你可以创建一个名为sdwebui的虚拟环境，并指定Python版本为3.</description>
    </item>
    
    <item>
      <title>使用ACME申请证书</title>
      <link>https://shiqstone.github.io/post/use_acme_to_request_a_certificate/</link>
      <pubDate>Tue, 14 Mar 2023 12:54:12 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/use_acme_to_request_a_certificate/</guid>
      <description>现在的网站基本都是HTTPS协议，想要提升一下资源访问性能，拥抱HTTP/2，但是浏览器就要求必须启用HTTPS才能正常接入HTTP/2。所以，把网站升级到HTTPS是很有必要。
网站想要升级到HTTPS，首先得申请下发个安全证书，现在下发证书很简单，方式也很多，很多域名提供商都提供免费证书申请。但是，很多证书都是有时间限制（3个月或者1年），时间到期就需要手动重新，手续麻烦而且还会忘记续期，如果想一劳永逸可以用工具自动生成证书并且自动续租。续租工具和方式也很多，本文将讲解用ACME实现证书申请和证书自动续期。
ACME安装 执行如下脚本即可自动安装
curl https://get.acme.sh | sh 安装程序会自动做以下操作：
自动把 acme.sh 安装到你的 home 的.acme.sh目录下，即~/.acme.sh/ 自动创建一个 bash 的 alias, 方便你的使用: alias acme.sh=~/.acme.sh/acme.sh 自动为你创建 cronjob, 每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书. 更改证书 acme被ZeroSSL收购，其默认的证书方式为ZeroSSL，但此证书生成时会携带邮箱，在这里也可以在生成证书时加一个--server参数来决定生成什么证书，或者直接修改默认证书机构
acme.sh --set-default-ca --server letsencrypt 生成证书 使用acme.sh --issue命令生成证书，但生成证书的同时会进行域名的所有权的验证。 acme.sh 有两种方式验证：http 和 dns 验证。
注意：如果需要生成泛域名（*.a.com）的证书，不能使用HTTP认证域名，需要改用DNS认证的方式
http验证方式
http方式需要通过以下几种方式来验证你的域名所有权来完成验证。
或配置网站根目录，命令参数为（&amp;ndash;webroot /home/wwwroot/mydomain.com/） 或关联服务器的nginx服务，命令参数为（&amp;ndash;nginx） 或关联服务器的apache服务，命令参数为（&amp;ndash;apache） 或自建虚拟webserver（服务器没有占用80端口），命令参数为（&amp;ndash;standalone） 假设服务器已搭建nginx服务，因此关联即可
acme.sh --issue -d file.a.com -d www.a.com -d img.a.com --nginx 参数解析：
--issue命令参数生成证书 -d定义需要生成证书的域名，如有多个域名需使用多次，以上定了三个域名：file.a.com/www.a.com/img.a.com 三个域名需要配置到nginx中，不一定都配置到同一个server中，所有域名都至少对应一个server，否则无法生成证书 ... server { listen 80; server_name file.</description>
    </item>
    
    <item>
      <title>简单理解Typescript里的泛型</title>
      <link>https://shiqstone.github.io/post/understand-generics-in-typescript/</link>
      <pubDate>Wed, 01 Mar 2023 14:43:25 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/understand-generics-in-typescript/</guid>
      <description>您可能认为 TypeScript 中的泛型（generics）实际上是三个独立的概念：
将类型传递给类型 将类型传递给函数 从传递给函数的参数推断类型 // 1. Passing types to types type PartialUser = Partial&amp;lt;{id: string; name: string}&amp;gt;; // 2. Passing types to functions const stringSet = new Set&amp;lt;string&amp;gt;(); // 3. Inferring types from arguments passed to functions const objKeys = &amp;lt;T extends object&amp;gt;(obj: T) =&amp;gt; { return Ojbect.keys(obj) as Array&amp;lt;keyof T&amp;gt;; }; const keys = objKeys({a: 1, b: 2}); // ^? const keys: (&amp;#34;a&amp;#34; | &amp;#34;b&amp;#34;)[] 让我们从将类型传递给类型开始。
在 TypeScript 中，您可以声明一个表示对象、基元、函数的类型——任何您想要的类型。</description>
    </item>
    
    <item>
      <title>如何在Mac上用西班牙输入法输入字符</title>
      <link>https://shiqstone.github.io/post/how-to-type-special-characters-on-mac-keyboard/</link>
      <pubDate>Fri, 24 Feb 2023 13:56:13 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/how-to-type-special-characters-on-mac-keyboard/</guid>
      <description>Mac在不同国家会根据当地语言习惯提供不同布局的键盘，主要版本包括美版、欧版、日版等，不同版本的键盘布局和输入内容也都略有不同。中国大陆使用的键盘是美版布局，也是大家日常最为习惯的键盘。
最近需要使用西班牙语，首先需要在输入法中添加 ES 西班牙，之后通过切换输入法就可以开始使用，输入法设置有西语和拉丁美洲两种不同的键盘映射，此处对我影响不大，默认选择了西班牙。
开始使用时，必然会用到的几个符号包括，重音符号，分音符号，ñ，感叹号，问号等，通过搜索整理，分别如下（以下说明用美版键盘标记）：
重音符号： &#39; + a (元音字母) 可得 á, é, í, ó, ú 分音符号： ⇧ + &#39; + u 如 güe ñ：; 问号：⇧ + =和⇧ + - 可得 ¿? 感叹号：=和⇧ + 1 可得 ¡! 完整符号映射如下
US ` 1 2 3 4 5 6 7 8 9 0 - = [ ] \ ; &#39; , . / ES &amp;lt; 1 2 3 4 5 6 7 8 9 0 &#39; ¡ ` + ç ñ ´ , .</description>
    </item>
    
    <item>
      <title>编写Shell脚本的一些知识点</title>
      <link>https://shiqstone.github.io/post/how-to-write-shell-script/</link>
      <pubDate>Tue, 21 Feb 2023 16:18:36 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/how-to-write-shell-script/</guid>
      <description>最近经常需要上服务器修改一个配置文件端口，操作倒是不多，但是每次都要重复命令略麻烦，所以准备写一个脚本来简化操作。因为有段时间没有写shell脚本，有点手生，简单点东西连查资料带写也花了半天多。作为总结，把过程中遇到的一些点复盘一下，算不上系统的知识整理。
需求描述 具体场景是一个远程服务器上的服务端口会不定期失效，目前修复服务的方法就是
远程登录到服务器上 修改配置文件中的端口号 重启服务 开放防火墙端口 在本地验证远程服务端口状态 现有操作主要用到下面的命令：
ssh $user@$host vim /usr/local/etc/xray/config.json systemctl restart xray firewall-cmd --zone=public --add-port=10086/tcp 部署这个服务所需的准备工作，如需要购买vps，安装linux系统，安装xray，配置服务器的免密登录等，此处不做详细说明。
接受参数 脚本主要功能是登录到远程服务器上修改端口配置，如果服务器IP，登录用户名，端口都是固定的，可以直接在代码中写死，但考虑脚本的可复用性，会声明几个变量，并设定默认值。
常用的几种获取参数的方式有以下几种：
直接获取，使用$1,$2,$3…进行解析 使用getopt函数: 单个字符选项的情况，例如：-n 10 -f file.txt等选项 使用getopts函数：可同时接受短命令和长命令，如：–prefix=/home等 直接获取 shell脚本自动将命令行参数赋给各个位置参数，输入参数以空格分隔（如果想在参数中使用空格，需要用引号引起来）；在程序中使用${n}，$0为程序名，$1为第一个参数，$2 ... $9为第二到第九个参数，参数超过9个之后，需要用大括号的方式获取${12}
```bash # bash test.sh a b c echo $0 # test.sh echo $1 # a echo $2 # b echo $3 # c ``` 这种方式优点在于简单直接，不需要做特殊处理就可以直接获取并使用参数，但缺点是不灵活，所有参数需要严格按顺序输入，且不能缺省，如果添加、删除以及调整参数顺序时，都需要小心修改程序；同时，参数比较多时，使用脚本不方便记忆。
使用getopts函数 getopts是shell中内建的命令，它的使用语法相对getopt简单，但它不支持长命令参数（--option）。它不会重排列所有参数的顺序，选项参数的格式必须是-d val，而不能是中间没有空格的-dval，遇到非-开头的参数，或者选项参数结束标记&amp;ndash;就中止了，如果中间遇到非选项的命令行参数，后面的选项参数就都取不到了，出现的目的仅仅是为了代替getopt较快捷方便的执行参数的分析。
命令格式为getopts optstring name [arg]
#!/bin/sh while getopts &amp;#34;:b:o:h&amp;#34; opt_name do case $opt_name in b) echo &amp;#34;-b Option is recognized, argument=$OPTARG&amp;#34; ;; o) echo &amp;#34;-o Option is recognized, argument=$OPTARG&amp;#34; ;; h) echo &amp;#34;-h Option is recognized&amp;#34; ;; :) echo &amp;#34;$OPTARG Option need a argument&amp;#34; ;; esac done optstring：表示要识别的命令行选项形式，如果一个字母后面有一个&amp;quot;:&amp;quot;，表示该命令行选项后面要跟一个参数。如optsting写成&amp;quot;co:f:&amp;quot;，表示支持-c、-o、-f选项识别，-o和-f选项后面需要跟一个参数</description>
    </item>
    
    <item>
      <title>命令行的艺术</title>
      <link>https://shiqstone.github.io/post/the-art-of-command-line/</link>
      <pubDate>Wed, 08 Feb 2023 15:08:29 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/the-art-of-command-line/</guid>
      <description>命令行的艺术 转自：GitHub github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md
这篇文章是许多作者和译者共同的成果。 这里的部分内容 首次 出现 于 Quora， 但已经迁移到了 Github，并由众多高手做出了许多改进。 如果你在本文中发现了错误或者存在可以改善的地方，请贡献你的一份力量。
前言 涵盖范围：
这篇文章不仅能帮助刚接触命令行的新手，而且对具有经验的人也大有裨益。本文致力于做到覆盖面广（涉及所有重要的内容），具体（给出具体的最常用的例子），以及简洁（避免冗余的内容，或是可以在其他地方轻松查到的细枝末节）。在特定应用场景下，本文的内容属于基本功或者能帮助您节约大量的时间。 本文主要为 Linux 所写，但在仅限 OS X 系统章节和仅限 Windows 系统章节中也包含有对应操作系统的内容。除去这两个章节外，其它的内容大部分均可在其他类 Unix 系统或 OS X，甚至 Cygwin 中得到应用。 本文主要关注于交互式 Bash，但也有很多技巧可以应用于其他 shell 和 Bash 脚本当中。 除去“标准的”Unix 命令，本文还包括了一些依赖于特定软件包的命令（前提是它们具有足够的价值）。 注意事项：
为了能在一页内展示尽量多的东西，一些具体的信息可以在引用的页面中找到。我们相信机智的你知道如何使用 Google 或者其他搜索引擎来查阅到更多的详细信息。文中部分命令需要您使用 apt-get，yum，dnf，pacman， pip 或 brew（以及其它合适的包管理器）来安装依赖的程序。 遇到问题的话，请尝试使用 Explainshell 去获取相关命令、参数、管道等内容的解释。 基础 学习 Bash 的基础知识。具体地，在命令行中输入 man bash 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你只学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。
熟悉至少一个基于文本的编辑器。通常而言 Vim （vi） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。</description>
    </item>
    
    <item>
      <title>让Hugo支持LaTex</title>
      <link>https://shiqstone.github.io/post/latex_for_hugo/</link>
      <pubDate>Thu, 03 Nov 2022 11:18:20 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/latex_for_hugo/</guid>
      <description>Hugo本身不支持渲染数学公式，只能使用前端方式来处理。
在已经生成的html页面中，使用javascript来渲染LaTex公式是一个可行思路，Mathjax是这方面最流行的库。
方案 按以下步骤引入mathjax：
在所使用的theme目录下新建layouts/partials/mathjax.html，添加内容 {{ if or .Params.math .Site.Params.math }} &amp;lt;script&amp;gt; MathJax = { tex: { inlineMath: [[&amp;#39;$&amp;#39;, &amp;#39;$&amp;#39;], [&amp;#39;\\(&amp;#39;, &amp;#39;\\)&amp;#39;]], displayMath: [[&amp;#39;$$&amp;#39;,&amp;#39;$$&amp;#39;], [&amp;#39;\\[&amp;#39;, &amp;#39;\\]&amp;#39;]], processEscapes: true, processEnvironments: true }, svg: { fontCache: &amp;#34;global&amp;#34;, }, options: { skipHtmlTags: [&amp;#39;script&amp;#39;, &amp;#39;noscript&amp;#39;, &amp;#39;style&amp;#39;, &amp;#39;textarea&amp;#39;, &amp;#39;pre&amp;#39;] } }; window.addEventListener(&amp;#39;load&amp;#39;, (event) =&amp;gt; { document.querySelectorAll(&amp;#34;mjx-container&amp;#34;).forEach(function(x){ x.parentElement.classList += &amp;#39;has-jax&amp;#39;}) }); &amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;https://polyfill.io/v3/polyfill.min.js?features=es6&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; id=&amp;#34;MathJax-script&amp;#34; async src=&amp;#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; code.has-jax { font: inherit; font-size: 100%; background: inherit; border: inherit; color: #515151; } &amp;lt;/style&amp;gt; {{- end }} &amp;lt;!</description>
    </item>
    
    <item>
      <title>MarkDown 中使用 LaTeX 数学式</title>
      <link>https://shiqstone.github.io/post/latex_in_markdown/</link>
      <pubDate>Wed, 12 Oct 2022 16:25:27 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/latex_in_markdown/</guid>
      <description>在很多与数学相关的地方，需要输入数学公式都会用到LaTeX，虽然很多数学学术论文整个文档就像使用Markdown一样是直接使用的LaTex语法来编辑的，但是仔细比对之后发现直接用LaTex语法来写整个文档来，它的效果和Markdown + LaTex Math 方式没有太大的区别。 但是LaTex的语法、编辑器、配置、中文支持等都要比Markdown要复杂的多，而且也不及Markdown已经非常成熟的生态（包括工具链、社区等）。下面简要介绍下 MarkDown 中如何使用LaTeX输入数学公式。
在 LaTeX 中，最常用到的主要有文本模式和数学模式这两种模式。数学模式又可分为行内公式{inline math)和行间公式 (display math) 两种形式。
行内公式形式是将数学公式插入文本行内，使之与文本融为一体，这种形式适合更简短的公式。 行内公式 $...$
行间公式形式是将数学公式插在文本行之间，自成一行或一个段落，与上下文附加一段垂直空白，使数学公式突出醒目。多行公式、公式组和微积分方程等复杂的数学式都是采用行间 公式形式编写。 行间公式 $$...$$
行内 ${f(x)=a_nx^n+a_{n-1}x^{n-1}+a_{n-2}x^{n-2}}+\cdots$ 行间 $${f(x)=a_nx^n+a_{n-1}x^{n-1}+a_{n-2}x^{n-2}}+\cdots \tag{1.1}$$ 行内 ${f(x)=a_nx^n+a_{n-1}x^{n-1}+a_{n-2}x^{n-2}}+\cdots$
行间 $${f(x)=a_nx^n+a_{n-1}x^{n-1}+a_{n-2}x^{n-2}}+\cdots \tag{1.1}$$
LaTex Math的语法多且杂，我们是没法完全记住这些语法的，能记住也不提倡，这里比较推荐名校莱斯Rice大学的一个语法手册，莱斯大学LaTex Math在线PDF手册。
当然安装了上述插件的VS Code也是有LaTex Math语法提示的。用英文字符反斜杠\就可以为你提示。下面我们就结合这个PDF里LaTex Math的语法在Markdown里面进行实战，以及对这些语法的使用进行一些简单的讲解。
希腊字母 使用$LaTex希腊字母语法$，也就是将LaTex的希腊字母语法用两个美元符号围住即可。比如:
α \alpha κ \kappa ψ \psi z \digamma ∆ \Delta Θ \Theta β \beta λ \lambda ρ \rho ε \varepsilon Γ \Gamma Υ \Upsilon χ \chi µ \mu σ \sigma κ \varkappa Λ \Lambda Ξ \Xi δ \delta ν \nu τ \tau ϕ \varphi Ω \Omega ϵ \epsilon o o θ \theta $ \varpi Φ \Phi ℵ \aleph η \eta ω \omega υ \upsilon % \varrho Π \Pi i \beth γ \gamma φ \phi ξ \xi ς \varsigma Ψ \Psi k \daleth ι \iota π \pi ζ \zeta ϑ \vartheta Σ \Sigma 值得注意的是希腊字母有大写和小写之分，这个大小写是由LaTex的首字母是否大小写来控制的。</description>
    </item>
    
    <item>
      <title>根据项目设置不同git配置及修改已提交的信息</title>
      <link>https://shiqstone.github.io/post/git_config_by_project/</link>
      <pubDate>Fri, 02 Sep 2022 21:52:22 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/git_config_by_project/</guid>
      <description>0. 前言 通常都会遇到同时有公司项目和个人项目并存的情况，而且一般两种项目的git配置是不一致的。已经不止一次遇到用公司git用户名向个人项目推送代码的问题，个人感觉这样很不专业，所以整理了相关处理操作。
1. 全局配置用户信息 查看配置信息
git config --list user.email=xxx@abc.com user.name=xxx 修改全局配置信息
# 设置用户名 git config --global user.name xxx # 设置作者邮箱 git config --global user.email xxx@abc.com 全局命令实际上是修改了~/.gitconfig这个文件，编辑这个文件可以看到完整配置。
2. 为不同项目设置不同配置 个人项目提交到github上时，不希望暴露出相关公司信息，就要单独设置每个项目的git配置。
每个git项目下都有一个.git的隐藏文件夹，该目录下有一个config文件，编辑文件内容，增加如下片段：
[user] name = xxx email = xxx@abc.com 也可以使用命令行方式实现相同目的，在项目根目录下执行以下命令即可
git config user.name xxx git config user.email xxx@abc.com 说明：在项目配置和全局配置同时存在的情况下，项目配置会覆盖全局配置。
3. 修改已push的commit信息 操作步骤如下：
先git log查看提交 hash，就是 commit-id
git log 提交记录会按时间倒序展示
rebase到要修改位置的上一个
# git rebase -i -p &amp;lt;previous-commit-id&amp;gt; git rebase -i -p 55d4ce7e35ff9a0c5590bc3589160cfd304d3ae5 会看到类似如下的提示</description>
    </item>
    
    <item>
      <title>博客从Hexo迁移到Hugo</title>
      <link>https://shiqstone.github.io/post/hexo_to_hugo/</link>
      <pubDate>Tue, 02 Aug 2022 13:25:20 +0800</pubDate>
      
      <guid>https://shiqstone.github.io/post/hexo_to_hugo/</guid>
      <description>前言 很久不写文章，最近整理了点东西准备发出来，结果发现原来使用的hexo因为npm版本原因，发布到github page一直出现问题，搜了一圈解决方案基本都是建议npm降级，折腾了半天没有成功，感觉不是很好，于是准备找个替代品迁移一下。
Hugo 简介 Hugo 是一个基于 Go 语言开发的静态网站生成器（SSG），目前由 @bep 领衔开发，Hugo 的突出特点是简洁、灵活、高效，目前有很多知名网站都在使用 Hugo：Netlify、Let’s Encrypt、IPFS、Cloudflare Developers、DigitalOcean Docs、1Password 等等。与目前国内流行的 Hexo 相比，Hugo 的速度可称为飞速🚀——在安装和使用上都是如此。 Hugo 支持Markdown 语法，我们可以将自己的文章写成Markdown 的格式，可以快速方便的创建自己的博客。
Hugo 安装 Hugo 使用方式比较简单，可参考官方 Quick Start。
在MacOs 中使用brew 命令安装：
brew install hugo 使用下面命令查看Hugo 是否安装成功：
hugo version hugo v0.101.0+extended darwin/arm64 BuildDate=unknown Hugo 使用 创建博客 hugo 安装成功后，使用hugo new site 命令创建博客
# 博客项目的名字为myblog hugo new site myblog 这个命令会创建一个名为myblog 的目录，这就是博客的根目录。目录结构如下：
. ├── README.md ├── archetypes # 文章模板 │ └── default.md ├── config.</description>
    </item>
    
    <item>
      <title>Go语言开发效率的小技巧</title>
      <link>https://shiqstone.github.io/post/tips-for-developing-efficiency-in-go-language/</link>
      <pubDate>Tue, 02 Aug 2022 00:15:51 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/tips-for-developing-efficiency-in-go-language/</guid>
      <description>前言 每门语言都有自己的语法糖，像java的语法糖就有方法变长参数、拆箱与装箱、枚举、for-each等等，Go语言也不例外，其也有自己的语法糖，掌握这些语法糖可以助我们提高开发的效率，所以本文就来介绍一些Go语言的语法糖。
可变长参数 Go语言允许一个函数把任意数量的值作为参数，Go语言内置了...操作符，在函数的最后一个形参才能使用...操作符，使用它必须注意如下事项：
可变长参数必须在函数列表的最后一个； 把可变长参数当切片来解析，可变长参数没有没有值时就是nil切片 可变长参数的类型必须相同 func test(a int, b ...int) { return } 既然我们的函数可以接收可变长参数，那么我们在传参的时候也可以传递切片使用...进行解包转换为参数列表，append 方法就是最好的例子：
var sarr []int sarr = append(sarr, 1) sarr = append(sarr, sarr...) append方法定义如下：
// slice = append(slice, elem1, elem2) // slice = append(slice, anotherSlice...) func append(slice []Type, elems ...Type) []Type 声明不定长数组 数组是有固定长度的，我们在声明数组时一定要声明长度，因为数组在编译时就要确认好其长度，但是有些时候对于想偷懒的我，就是不想写数组长度，有没有办法让他自己算呢？当然有，使用&amp;hellip;操作符声明数组时，你只管填充元素值，其他的交给编译器自己去搞就好了；
a := [...]int{1, 3, 5} // 数组长度是3，等同于 a := [3]{1, 3, 5} 有时我们想声明一个大数组，但是某些index想设置特别的值也可以使用&amp;hellip;操作符搞定：
a := [...]int{1: 20, 999: 10} // 数组长度是100, 下标1的元素值是20，下标999的元素值是10，其他元素值都是0 init函数 Go语言提供了先于main函数执行的init函数，初始化每个包后会自动执行init函数，每个包中可以有多个init函数，每个包中的源文件中也可以有多个init函数，加载顺序如下：</description>
    </item>
    
    <item>
      <title>在Linux下如何防止定时脚本重复执行</title>
      <link>https://shiqstone.github.io/post/linux-crontab-avoid-repeat-run/</link>
      <pubDate>Fri, 13 Mar 2020 15:53:34 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/linux-crontab-avoid-repeat-run/</guid>
      <description>场景 好多系统中会用到邮件系统，我们假设有一个 PHP 脚本用来发送邮件。使用 Linux cron 每分钟执行一次 我们暂时不引入队列系统，其实使用队列处理此方式更优。
我们得到下面的基本配置
* * * * * php /home/app/email.php 问题分析和解决 异常问题 如果这个邮件服务出现异常，进程僵死怎么办？ 假设由于未知因素， email.php 脚本一直执行，没有退出。极端的情况，进入一个 while 死循环。 这下倒好，原来说好的一分钟执行一次，现在一直死这边了，后面的脚本也不能跑了
解决办法： 使用 timeout，假设我们设定每个脚本最多执行时间位 200秒，超过 200秒 就自动死掉。
* * * * * timeout 200 php /home/app/email.php 重复问题 如果这个脚本执行时间超过 60秒，下一分钟又会执行 php email.php，如果避免重复执行？ 这样会出现，有两个进程同时在执行 php email.php，那会不会出现同一个任务被执行了两次？
解决办法： 使用 flock 进行互斥控制
用法： flock [选项] &amp;lt;文件|目录&amp;gt; &amp;lt;命令&amp;gt; [&amp;lt;参数&amp;gt;...] flock [选项] &amp;lt;文件|目录&amp;gt; -c &amp;lt;命令&amp;gt; flock [选项] &amp;lt;文件描述符号码&amp;gt; 通过 shell 脚本管理文件锁。
选项： -s, --shared 获取共享锁 -x, --exclusive 获取排他锁(默认) -u, --unlock 移除锁 -n, --nonblock 失败而非等待 -w, --timeout &amp;lt;秒&amp;gt; 等待限定的时间 -E, --conflict-exit-code &amp;lt;数字&amp;gt; 冲突或超时后的退出代码 -o, --close 运行命令前关闭文件描述符 -c, --command &amp;lt;命令&amp;gt; 通过 shell 运行单个命令字符串 -F, --no-fork 执行命令时不 fork --verbose 增加详尽程度 -h, --help display this help -V, --version display version 使用其中的排他设置</description>
    </item>
    
    <item>
      <title>centos7 防火墙和端口</title>
      <link>https://shiqstone.github.io/post/centos7-firewall/</link>
      <pubDate>Sun, 01 Mar 2020 17:13:08 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/centos7-firewall/</guid>
      <description>首先检查某端口是否开启： firewall-cmd --query-port=80/tcp --zone=public #查询80端口是否开启 返回no即未开启，显示yes为已开启
开启某端口 firewall-cmd --zone=public --add-port=80/tcp --permanent #添加80端口 修改完成后需要重启防火墙服务才能生效
查看防火墙状态 systemctl status firewalld 有如下提示表示未开启 FirewallD is not running
开启防火墙，没有任何提示即开启成功 systemctl start firewalld 关闭防火墙 systemctl stop firewalld 重启防火墙 systemctl restart firewalld 相关网站收藏 http://ping.pe http://ping.chinaz.com</description>
    </item>
    
    <item>
      <title>一次慢查询问题的排查</title>
      <link>https://shiqstone.github.io/post/troubleshooting-a-slow-query/</link>
      <pubDate>Sat, 01 Feb 2020 11:55:30 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/troubleshooting-a-slow-query/</guid>
      <description>问题发现 某个业务的查询页面打开非常慢，甚至卡死，通过排查日志，定位到是分页查询有慢查询sql，其中一条简单查询耗时长达40多秒 结合前后其他sql耗时都在毫秒级，排除网络问题，在命令行中执行sql也同样很慢
问题分析 有问题的sql如下
mysql&amp;gt; select count(*) from test_tab where update_time&amp;gt;=&amp;#39;2020-01-10&amp;#39; and update_time&amp;lt;&amp;#39;2020-01-11&amp;#39; and label is not null; +----------+ | count(*) | +----------+ | 229330 | +----------+ 1 row in set (41.34 sec) 首先看了一下全表数据，接近千万级，但是有趣的是耗时只有不到4s，对于千万级的表，勉强可以接收
mysql&amp;gt; select count(*) from test_tab; +----------+ | count(*) | +----------+ | 9469766 | +----------+ 1 row in set (3.86 sec) 更有意思的是，执行相同条件查询数据记录的sql，结果10ms就返回了
mysql&amp;gt; select id, label, call_round, dial_start_time, dial_duration, disconnect_reason, update_time from test_tab where update_time&amp;gt;=&amp;#39;2020-01-10&amp;#39; and update_time&amp;lt;&amp;#39;2020-01-11&amp;#39; and label is not null order by update_time desc limit 0, 20; +----------+-------+------------+---------------------+---------------+-------------------+---------------------+ | id | label | call_round | dial_start_time | dial_duration | disconnect_reason | update_time | +----------+-------+------------+---------------------+---------------+-------------------+---------------------+ | 17510408 | F | 0 | NULL | NULL | NULL | 2020-01-10 21:01:09 | | 17510411 | F | 0 | NULL | NULL | NULL | 2020-01-10 21:01:08 | | 17510421 | E | 8 | 2020-01-10 20:59:43 | 78 | NULL | 2020-01-10 21:00:58 | | 17510418 | F | 0 | NULL | NULL | NULL | 2020-01-10 21:00:54 | | 17510407 | C | 15 | 2020-01-10 20:59:33 | 78 | NULL | 2020-01-10 21:00:48 | | 17510416 | A | 8 | 2020-01-10 20:59:34 | 57 | NULL | 2020-01-10 21:00:28 | | 17510413 | C | 2 | 2020-01-10 21:00:04 | 20 | NULL | 2020-01-10 21:00:21 | | 17510415 | F | NULL | NULL | NULL | NULL | 2020-01-10 21:00:20 | | 17510412 | F | NULL | NULL | NULL | NULL | 2020-01-10 21:00:18 | | 17510423 | C | 4 | 2020-01-10 20:59:49 | 31 | NULL | 2020-01-10 21:00:17 | | 17510420 | C | 1 | 2020-01-10 20:59:46 | 4 | NULL | 2020-01-10 20:59:47 | | 17510424 | F | NULL | NULL | NULL | 1 | 2020-01-10 20:59:44 | | 17510410 | F | NULL | NULL | NULL | 1 | 2020-01-10 20:59:41 | | 17510419 | F | NULL | NULL | NULL | 1 | 2020-01-10 20:59:38 | | 17510437 | F | 0 | NULL | NULL | NULL | 2020-01-10 20:59:37 | | 17510441 | F | 0 | NULL | NULL | NULL | 2020-01-10 20:59:35 | | 17510417 | F | NULL | NULL | NULL | 1 | 2020-01-10 20:59:34 | | 17510414 | F | NULL | NULL | NULL | 1 | 2020-01-10 20:59:32 | | 17510409 | F | NULL | NULL | NULL | 8 | 2020-01-10 20:59:31 | | 17510422 | F | NULL | NULL | NULL | 6 | 2020-01-10 20:59:29 | +----------+-------+------------+---------------------+---------------+-------------------+---------------------+ 20 rows in set (0.</description>
    </item>
    
    <item>
      <title>尝试使用Go截取视频生成缩略图</title>
      <link>https://shiqstone.github.io/post/try-golang-snapshot-video-thumb/</link>
      <pubDate>Fri, 31 Jan 2020 18:44:26 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/try-golang-snapshot-video-thumb/</guid>
      <description>1 基本命令 使用ffmpeg截取视频生成图片，原始命令为
ffmpeg -i src.mp4 -y -f mjpeg -ss 3 -t 1 -s 80x44 dist.jpg 2 简单封装 package main import ( &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os/exec&amp;#34; ) func main() { filename := &amp;#34;test.mp4&amp;#34; width := 288 height := 512 output := &amp;#34;output.jpg&amp;#34; cmd := exec.Command(&amp;#34;ffmpeg&amp;#34;, &amp;#34;-i&amp;#34;, filename, &amp;#34;-vframes&amp;#34;, &amp;#34;1&amp;#34;, &amp;#34;-s&amp;#34;, fmt.Sprintf(&amp;#34;%dx%d&amp;#34;, width, height), &amp;#34;-f&amp;#34;, &amp;#34;singlejpeg&amp;#34;, output) var buffer bytes.Buffer cmd.Stdout = &amp;amp;buffer if cmd.Run() != nil { panic(&amp;#34;could not generate frame&amp;#34;) } } 3 查询数据库 增加从mysql数据库读取视频路径</description>
    </item>
    
    <item>
      <title>windows程序员常见乱码问题汇总</title>
      <link>https://shiqstone.github.io/post/gibberish/</link>
      <pubDate>Sun, 18 Aug 2019 13:14:45 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/gibberish/</guid>
      <description> 名称 示例 特点 产生原因 古文码 鍝堝搱鐪嬪埌瀹堕噷鐫″ぇ瑙� 大都为不认识的古文，夹杂日韩文 以GBK方式读取UTF-8编码的中文 口子码 ����������� 大部分字符为小方块 以UTF-8方式读取GBK编码的中文 符号码 å“ˆå“ˆçœ‹åˆ°å®¶é‡Œç¡å¤§è§‰ 大部分字符为各种符号 以ISO8859-1方式读取UTF-8编码的中文 拼音码 ¿¨·É»úÉÏµÄ 大部分字符为头顶带各种类似声调符号的字母 以ISO8859-1方式读取GBK编码的中文 问句码 幽月要好好学习天天向?? 字符串长度为偶数时正常，长度为奇数时最后几个字符变为问号 以GBK的方式读取UTF-8编码的中文，然后用UTF-8格式再次读取 锟拷码 锟斤拷锟斤拷锟斤拷锟 全中文字符，且大部分文字为“锟斤拷”几个字符 以UTF-8方式读取GBK编码的中文，然后用GBK格式再次读取 </description>
    </item>
    
    <item>
      <title>vue-router&#43;nginx 路径配置方法</title>
      <link>https://shiqstone.github.io/post/vue-route-nginx/</link>
      <pubDate>Sun, 11 Aug 2019 19:09:48 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/vue-route-nginx/</guid>
      <description>vue-router 的默认数据hash模式-使用url的hash来模拟一个完整的URL，于是当URL改变时，页面不会重新加载。
一般情况下，我们不喜欢丑丑的hash，类似于index.html#/matchResult，可以使用路由的history模式。history模式是利用history.pushState API来实现页面跳转。
但是有个问题，在使用nginx的时候，我们需要添加一些配置。
直接配置在根路径下 直接配置在根路径下，访问的时候只用输入http://yoursite.com，在nginx的配置如下
location / { try_files $uri $uri/ /index.html; } 非根路径配置 如果一个域名下有多个项目，那么使用根路径配置就不合适了，我们需要在根路径下指定一层路径，比如说
A项目
http://yoursite.com/A B项目
http://yoursite.com/B nginx的配置
location ^~/A { alias /XX/A;//此处为A的路径 index index.html; try_files $uri $uri/ /A/index.html; } location ^~/B { alias /XX/B;//此处为B的路径 index index.html; try_files $uri $uri/ /B/index.html; } tip: 注意要用alias不能用root</description>
    </item>
    
    <item>
      <title>HTTP基础知识</title>
      <link>https://shiqstone.github.io/post/http-101/</link>
      <pubDate>Sat, 03 Aug 2019 18:40:38 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/http-101/</guid>
      <description>了解HTTP基础知识，对日常工作中web开发和问题排查有很大的帮助，在没有一定的项目经验之前学习这些基础知识会有一些困扰，但有过一定开发经验，尤其是遇到问题碰过几次壁之后再回来学习这些相关内容就会有不一样的感受了
1. URI和URL 这里我们先了解一下URI和URL，URI的全称为Uniform Resource Identifier，即统一资源标志符，URL的全称为Universal Resource Locator，即统一资源定位符。
举例来说，github.com/favicon.ico是GitHub的网站图标链接，它是一个URL，也是一个URI。即有这样的一个图标资源，我们用URL/URI来唯一指定了它的访问方式，这其中包括了访问协议https、访问路径（/即根目录）和资源名称favicon.ico。通过这样一个链接，我们便可以从互联网上找到这个资源，这就是URL/URI。
URL是URI的子集，也就是说每个URL都是URI，但不是每个URI都是URL。那么，怎样的URI不是URL呢？URI还包括一个子类叫作URN，它的全称为Universal Resource Name，即统一资源名称。URN只命名资源而不指定如何定位资源，比如urn:isbn:0451450523指定了一本书的ISBN，可以唯一标识这本书，但是没有指定到哪里定位这本书，这就是URN。
但在目前互联网中，几乎所有的URI都是URL，长久以后，我们一般都把网页链接统称为URL。
2. URL完整格式 在平常对前端同学的面试中，我都会让面试者解释他们对URL的了解，很多人都只能简单的说域名和请求路径两部分，但这明显是不完整的，也正因为对URL格式理解的不完整，导致在遇到一些特殊格式链接地址时手足无措。
一个完整的URL链接格式
scheme://[username[:password]@]hostname[:port]/path/[;parameter]/[?query][#fragment] 各部分说明如下，其中括号部分为可选项
字段 名 称 说明 scheme 协议 该链接地址使用的协议，常用的协议是http和https，其他ftp, file, nfs, sftp 等也都是合法的协议 :// 分隔符 以此符号分隔协议和其他部分 hostname 主机名 指明链接所在服务器的地址，可以是域名或IP地址 hort 端口 提供服务的端口，针对不同协议有默认端口，如http对应80端口，https对应443端口，也可以自定义 path 路径 网络资源在服务器中的指定路径 ;parameter 参数 可用于向服务器传入请求参数，用键值对表示，现在比较少见这种传递参数方式 ?query 查询 用?将url的路径部分和其他部分区分开，大多服务端框架也习惯将get参数拼做query方式传递；注意：由于可能有异常导致出现多个问号，服务端会做一定的容错处理，截取后一段query的情况比较常见 #fragment 片段 一小片或者一部分资源的名字。引用对象时，不会将frag字段传送给服务器。这个字段是在客户端内部使用的。通过字符”#”将其与URL的其余部分分隔开来。静态页面通常用片段配合锚点直接定位到页面的某个部分 username[:password]@ 用户名密码 有一些服务（ftp）需要提供用户名密码验证，可以采用这种方式 3. HTTP和HTTPS HTTP全称是Hyper Text Transfer Protocol，用于从网络传输超文本数据到本地浏览器的传送协议，目前广泛使用的是HTTP 1.1版本
HTTPS的全称是Hyper Text Transfer Protocol over Secure Socket Layer，是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，简称为HTTPS。
HTTPS的安全基础是SSL，主要作用是通过建立一个信息安全通道来保证数据传输安全，并且可以通过安全证书保证网站的真实性；HTTPS是未来发展的方向，越来越多的网站都要求将HTTPS作为标准服务。</description>
    </item>
    
    <item>
      <title>Git 多平台换行符问题(LF or CRLF)</title>
      <link>https://shiqstone.github.io/post/git-lf-crlf/</link>
      <pubDate>Wed, 24 Apr 2019 00:06:23 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/git-lf-crlf/</guid>
      <description>$ git add . fatal: CRLF would be replaced by LF ... 文本文件所使用的换行符，在不同的系统平台上是不一样的。UNIX/Linux 使用的是 0x0A（LF），早期的 Mac OS 使用的是 0x0D（CR），后来的 OS X 在更换内核后与 UNIX 保持一致了。但 DOS/Windows 一直使用 0x0D0A（CRLF） 作为换行符。
跨平台协作开发是常有的，不统一的换行符确实对跨平台的文件交换带来了麻烦。最大的问题是，在不同平台上，换行符发生改变时，Git 会认为整个文件被修改，这就造成我们没法 diff，不能正确反映本次的修改。还好 Git 在设计时就考虑了这一点，其提供了一个 autocrlf 的配置项，用于在提交和检出时自动转换换行符，该配置有三个可选项：
true: 提交时转换为 LF，检出时转换为 CRLF false: 提交检出均不转换 input: 提交时转换为LF，检出时不转换 用如下命令即可完成配置：
# 提交时转换为LF，检出时转换为CRLF git config --global core.autocrlf true # 提交时转换为LF，检出时不转换 git config --global core.autocrlf input # 提交检出均不转换 git config --global core.autocrlf false 如果把 autocrlf 设置为 false 时，那另一个配置项 safecrlf 最好设置为 ture。该选项用于检查文件是否包含混合换行符，其有三个可选项：</description>
    </item>
    
    <item>
      <title>windows环境下php-cgi使用curl请求接口阻塞超时的问题</title>
      <link>https://shiqstone.github.io/post/windows-php-cgi-timeout/</link>
      <pubDate>Tue, 16 Apr 2019 23:59:07 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/windows-php-cgi-timeout/</guid>
      <description>问题 在开发一个新功能，需要在运行的web界面，请求一个远程服务，功能很简单，用curl封转一个远程请求方法调用，对返回结果做简单处理即可；
功能开发完成，为了测试，临时写了一个demo接口，在页面配置好该接口，结果测试请求时报错，追踪错误日志发现，在请求demo接口时超时未响应。
分析 首先通过浏览器访问，确认demo接口服务正常；在命令行中使用curl脚本也能获取正常返回结果；
开发环境使用的是nginx虚拟主机+php-cgi部署，通过本地绑定host的方式访问，初步分析是php进程运行时不能获取系统host设置，于是准备采用在curl请求的header头中添加host的方式绑定域名；（后续回归发现，这个判断是不准确的，域名未绑定返回的错误信息是 Could not resolve host， 而实际返回的错误信息为 Operation timed out）
在header头添加host设置之后，还是继续提示请求超时的错误，为确认代码无误，将发送远程请求的这段代码截取出来，测试代码如下：
&amp;lt;?php $header = [ &amp;#34;Host: demo.domain.com&amp;#34;, ]; $params = []; $ch = curl_init(); $defaults[CURLOPT_URL] = &amp;#39;http://127.0.0.1/api/demo&amp;#39;; $defaults[CURLOPT_HEADER] = FALSE; $defaults[CURLOPT_USERAGENT] = &amp;#34;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.98 Safari/537.36&amp;#34;; $defaults[CURLOPT_FOLLOWLOCATION] = TRUE; $defaults[CURLOPT_RETURNTRANSFER] = TRUE; $defaults[CURLOPT_CONNECTTIMEOUT] = 3; $defaults[CURLOPT_TIMEOUT] = 3; curl_setopt($ch, CURLOPT_HTTPHEADER, array(&amp;#39;Expect:&amp;#39;)); $options = [CURLOPT_HTTPHEADER=&amp;gt;$header]; curl_setopt_array($ch, (array) $options + $defaults); //var_dump($options, $defaults, (array) $options + $defaults); $data = curl_exec($ch); curl_close($ch); echo $data; 在本地命令行执行代码，结果正常响应；通过比对各项请求参数配置，完全一致，说明功能代码应该是没有问题的，于是把注意力再放到环境上；</description>
    </item>
    
    <item>
      <title>协作开发的项目配置文件管理</title>
      <link>https://shiqstone.github.io/post/project-config-manage/</link>
      <pubDate>Mon, 15 Apr 2019 22:38:06 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/project-config-manage/</guid>
      <description>背景 我们在日常开发中经常遇到这样一些比较典型的情况：一个开发团队有多个成员，每个人各自使用不同的开发环境，linux、windows或者Mac OS，每个人使用的IDE也不尽相同。 对于程序本身，并没有什么问题，php可以在各个平台正常运行，但是每个人可能会有各自的开发环境，团队应该提供单独的测试环境，线上服务也可能需要提供灰度和正式环境，不同的环境对应的配置文件中服务配置、数据库配置、路径配置多少都会有不一致的设置。 以thinkphp为例，项目基本配置都在config.php和database.php中，为保证服务能正常启动运行，配置文件必不可缺，都应该提交到代码仓库中去（注意：如果代码库是公开的github，则用户名密码等敏感信息一定不能提交发布，本文所讨论情况，局限于私有代码库） 这在代码的版本控制上，可能出现以下几种麻烦：
成员在本地开发的时候，都需要将配置修改为各自不同的设置，提交代码和拉去代码时，可能产生冲突，虽然不难解决，但每次解决类似问题比较影响效率 也有成员处于安全考虑，不将本地敏感配置提交到代码库，但每次拉取代码后，本地设置都需要重新修改一遍 不同测试和生产环境使用的配置不同，每次发布上线代码时都需要认真比对修改配置，无法完全自动化处理 可以简单粗暴的将配置文件排除在代码库之外，这能解决上面一部分问题，但是显然代码库是不完整的，新成员直接拉取代码是无法运行的，更致命的是，当项目需要新增或修改一个公共配置的时候，不得不通知所有成员手动更新配置文件 …… 方案对比 基于Base类的配置文件 曾经在一些历史项目中采用这个方案，框架为基础极简架构，只提供基础mvc；在项目中使用一个Config类作为主配置文件，Config类继承自ConfigBase类，配置项都声明为类中的常量，在使用配置项的地方直接读取子类的常量参数； 所有配置项都会在基类进行定义，环境有别于基类的配置则在子类中重新声明，覆盖基类定义，这样每个人都可以有自己的环境配置，且添加公共配置的时候，直接添加到ConfigBase就可以； 项目初始化的时候，所有配置都写在基类中，Config类默认为空，后续开发过程中，可以将本地配置设置到Config类中，并将Config.php文件添加到代码库ignore配置中，这样就可以满足协同开发配置问题； 如果希望将自己的配置文件也添加到代码库中进行变更管理，可以复制Config.php生成带个人后缀的配置文件Config.php.dev，将个人文件提交到代码库，之后重新生成链接文件Config.php指向到个人配置文件，即可满足要求；
Config.php &amp;lt;?php class Config extends ConfigBase { const LOG_PATH = &amp;#39;/home/user/log/project/&amp;#39;; ... } ConfigBase.php &amp;lt;?php class ConfigBase { const LOG_PATH = &amp;#39;/var/log/project/&amp;#39;; ... } Demo.php &amp;lt;?php class Demo { public function test() { $logPath = Config::LOG_PATH; } } 辅助脚本生成/更新配置文件 对于一些目前比较流行的开源框架（以thinkphp为例），基本都是采用在指定路径的config.php文件中返回php数组的方式定义系统配置，（也支持.ini，.xml，.json等格式的配置文件，单最终也都由框架解析为php数组。）显然，前面所提到的方式不适用，但在这个方案的基础上我们可以做一点变化满足要求。 框架默认读取的配置文件是config.php和database.php，还是以config配置为例，考虑添加config.base.php作为基础配置文件，包括全部配置项，再增加一个config.dev.php作为个人配置文件，默认返回空数组，有个人配置项时，个人配置覆盖基础配置；项目实际还是从config.php读取配置，初始化默认为空； 编写一个脚手架脚本，提供初始化和更新功能，初始化时，根据config.base.php和config.dev.php配置生成一个合并的配置文件config.php供项目读取；执行更新任务时，比对config.php文件、基础配置和个人配置，如果基础配置有新增，则将新加配置项添加到config.php中，如果有配置修改，依照个人配置覆盖基础配置的原则将配置项更新到config.php文件中； 同样，将config.php文件加到代码库ignore配置中，添加个人后缀的本地配置文件，并可提交到代码库管理，执行脚本时，指定自己使用的本地配置文件，同样可以满足协同开发的配置管理基本要求。
基于环境变量的配置管理 php本身可以通过getenv获取环境变量，现在主流的框架对环境变量也有很好的支持，所以考虑通过设置环境变量的方式来指定加载不同的配置文件，这样就可以满足针对不同环境使用不同配置的管理和切换问题；
常见设置环境变量方法： #Apache SetEnv APPLICATION_ENV develop #nginx fastcgi_param APPLICATION_ENV develop; #php cli $ export APPLICATION_ENV=develop 那么框架就会自动加载对应的配置文件（默认位于 application/develop.</description>
    </item>
    
    <item>
      <title>使用Hexo&#43;github搭建博客（基础）</title>
      <link>https://shiqstone.github.io/post/first-hexo/</link>
      <pubDate>Sat, 13 Apr 2019 16:22:54 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/first-hexo/</guid>
      <description>前提 安装Node.js，配置node环境 安装和配置git 注册github账号，新建项目，项目名设定为：{username}.github.io，并且勾选Initialize this repository with a README 安装Hexo 新建文件夹
mkdir blog cd blog 安装Hexo
npm install hexo -g 检查安装结果
hexo -v 初始化
hexo init 安装所有依赖组件
npm install 生成blog网站代码
hexo g 启动本地服务
hexo s 如果启动成功，可访问http://localhost:4000 进行预览 如果页面无法访问，可能是本地端口被占用，可使用以下命令更改端口启动服务
hexo server -p port 当出现如下界面表示服务启动成功 将hexo与github page关联起来 设置git的user和email
git config --global user.name &amp;#34;you name&amp;#34; git config --global user.email &amp;#34;you email&amp;#34; 设置git免密信任授权，将本地~/.ssh/id_rsa.pub 文件的内容添加到github settings-&amp;gt;SSH keys 测试ssh信任是否成功
ssh -T git@github.com 配置Deployment，在文件夹中找到_config.yml配置文件，修改repo的值
deploy: type: git repository: git@github.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://shiqstone.github.io/post/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shiqstone.github.io/post/hello-world/</guid>
      <description>Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick Start Create a new post $ hexo new &amp;#34;My New Post&amp;#34; More info: Writing
Run server $ hexo server More info: Server
Generate static files $ hexo generate More info: Generating
Deploy to remote sites $ hexo deploy More info: Deployment</description>
    </item>
    
  </channel>
</rss>
